/*
 * This file was automatically generated by EvoSuite
 * Mon May 24 09:07:54 GMT 2021
 */

package de.gurkenlabs.litiengine.util.geom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.gurkenlabs.litiengine.util.geom.GeometricUtilities;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Arc2D;
import java.awt.geom.Area;
import java.awt.geom.Dimension2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RectangularShape;
import java.awt.geom.RoundRectangle2D;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GeometricUtilities_ESTest extends GeometricUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Point2D.Float point2D_Float0 = new Point2D.Float();
      assertNotNull(point2D_Float0);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      
      Rectangle rectangle0 = new Rectangle((-504), (-504), 0, 16384);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals((-504.0), rectangle0.getX(), 0.01);
      assertEquals(7688.0, rectangle0.getCenterY(), 0.01);
      assertEquals((-504.0), rectangle0.getY(), 0.01);
      assertEquals((-504.0), rectangle0.getCenterX(), 0.01);
      assertEquals((-504.0), rectangle0.getMinY(), 0.01);
      assertEquals((-504.0), rectangle0.getMinX(), 0.01);
      assertEquals((-504.0), rectangle0.getMaxX(), 0.01);
      assertEquals(15880.0, rectangle0.getMaxY(), 0.01);
      assertEquals(16384.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertNotNull(rectangle0);
      assertEquals((-504), rectangle0.y);
      assertEquals(16384, rectangle0.height);
      assertEquals((-504), rectangle0.x);
      assertEquals(0, rectangle0.width);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)GeometricUtilities.translateShape(rectangle0, point2D_Float0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals((-504.0), rectangle0.getX(), 0.01);
      assertEquals(7688.0, rectangle0.getCenterY(), 0.01);
      assertEquals((-504.0), rectangle0.getY(), 0.01);
      assertEquals((-504.0), rectangle0.getCenterX(), 0.01);
      assertEquals((-504.0), rectangle0.getMinY(), 0.01);
      assertEquals((-504.0), rectangle0.getMinX(), 0.01);
      assertEquals((-504.0), rectangle0.getMaxX(), 0.01);
      assertEquals(15880.0, rectangle0.getMaxY(), 0.01);
      assertEquals(16384.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1, path2D_Double0.getWindingRule());
      assertNotNull(path2D_Double0);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals((-504), rectangle0.y);
      assertEquals(16384, rectangle0.height);
      assertEquals((-504), rectangle0.x);
      assertEquals(0, rectangle0.width);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertEquals((-1.5), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1.5), rectangle2D_Float0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Float0);
      assertEquals((-1.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.y, 0.01F);
      
      Rectangle rectangle0 = new Rectangle(1, (-62));
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals((-62.0), rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-62.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-31.0), rectangle0.getCenterY(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals((-62), rectangle0.height);
      assertEquals(1, rectangle0.width);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangle2D_Float0.createUnion(rectangle0);
      assertEquals((-1.5), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1.5), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals((-62.0), rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-62.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-31.0), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-1.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals((-62), rectangle0.height);
      assertEquals(1, rectangle0.width);
      assertEquals(2.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-2.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)GeometricUtilities.getCenter((RectangularShape) rectangle2D_Double0);
      assertEquals((-1.5), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1.5), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals((-62.0), rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-62.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-31.0), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertNotNull(point2D_Double0);
      assertEquals((-1.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals((-62), rectangle0.height);
      assertEquals(1, rectangle0.width);
      assertEquals(2.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-2.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals((-1.5), point2D_Double0.y, 0.01);
      
      Point2D.Double point2D_Double1 = (Point2D.Double)GeometricUtilities.getCenter(493.7, (double) (-1.0F), (double) (-1.0F), (double) (-1.0F));
      assertNotNull(point2D_Double1);
      assertEquals((-1.0), point2D_Double1.y, 0.01);
      assertEquals(246.35, point2D_Double1.x, 0.01);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      
      Point2D.Double point2D_Double2 = (Point2D.Double)GeometricUtilities.project((Point2D) point2D_Double1, (Point2D) point2D_Double0, (double) 1);
      assertEquals((-1.5), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1.5), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals((-62.0), rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-62.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-31.0), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertNotNull(point2D_Double2);
      assertEquals((-1.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals((-62), rectangle0.height);
      assertEquals(1, rectangle0.width);
      assertEquals(2.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-2.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals((-1.5), point2D_Double0.y, 0.01);
      assertEquals((-1.0), point2D_Double1.y, 0.01);
      assertEquals(246.35, point2D_Double1.x, 0.01);
      assertEquals((-1.0020296284560626), point2D_Double2.y, 0.01);
      assertEquals(245.35000205969794, point2D_Double2.x, 0.01);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double0, point2D_Double2);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertNotSame(point2D_Double1, point2D_Double2);
      assertNotSame(point2D_Double2, point2D_Double0);
      assertNotSame(point2D_Double2, point2D_Double1);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertFalse(point2D_Double2.equals((Object)point2D_Double0));
      assertFalse(point2D_Double2.equals((Object)point2D_Double1));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1778803.3673502535, 0.0, 0, 0.0F);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1778804.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1778803.0, rectangle0.getMinX(), 0.01);
      assertEquals(1778803.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(1778803.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals(1778803, rectangle0.x);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(rectangle0, 1906.000588, 749.59108005, 0);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1778804.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1778803.0, rectangle0.getMinX(), 0.01);
      assertEquals(1778803.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(1778803.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1778803.5, arc2D_Double0.getCenterX(), 0.01);
      assertEquals(1778803.0, arc2D_Double0.getMinX(), 0.01);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01);
      assertEquals(1778804.0, arc2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals(1778803, rectangle0.x);
      assertEquals(749.59108005, arc2D_Double0.extent, 0.01);
      assertEquals(0.0, arc2D_Double0.y, 0.01);
      assertEquals(1778803.0, arc2D_Double0.x, 0.01);
      assertEquals(1.0, arc2D_Double0.width, 0.01);
      assertEquals(1906.000588, arc2D_Double0.start, 0.01);
      assertEquals(0.0, arc2D_Double0.height, 0.01);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)arc2D_Double0.getStartPoint();
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1778804.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1778803.0, rectangle0.getMinX(), 0.01);
      assertEquals(1778803.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(1778803.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1778803.5, arc2D_Double0.getCenterX(), 0.01);
      assertEquals(1778803.0, arc2D_Double0.getMinX(), 0.01);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01);
      assertEquals(1778804.0, arc2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01);
      assertNotNull(point2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals(1778803, rectangle0.x);
      assertEquals(749.59108005, arc2D_Double0.extent, 0.01);
      assertEquals(0.0, arc2D_Double0.y, 0.01);
      assertEquals(1778803.0, arc2D_Double0.x, 0.01);
      assertEquals(1.0, arc2D_Double0.width, 0.01);
      assertEquals(1906.000588, arc2D_Double0.start, 0.01);
      assertEquals(0.0, arc2D_Double0.height, 0.01);
      assertEquals(1778803.3621763897, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      Point2D.Double point2D_Double1 = (Point2D.Double)GeometricUtilities.project((Point2D) point2D_Double0, (Point2D) point0, 1778803.3673502535);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1778804.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1778803.0, rectangle0.getMinX(), 0.01);
      assertEquals(1778803.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(1778803.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1778803.5, arc2D_Double0.getCenterX(), 0.01);
      assertEquals(1778803.0, arc2D_Double0.getMinX(), 0.01);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01);
      assertEquals(1778804.0, arc2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01);
      assertNotNull(point2D_Double1);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals(1778803, rectangle0.x);
      assertEquals(749.59108005, arc2D_Double0.extent, 0.01);
      assertEquals(0.0, arc2D_Double0.y, 0.01);
      assertEquals(1778803.0, arc2D_Double0.x, 0.01);
      assertEquals(1.0, arc2D_Double0.width, 0.01);
      assertEquals(1906.000588, arc2D_Double0.start, 0.01);
      assertEquals(0.0, arc2D_Double0.height, 0.01);
      assertEquals(1778803.3621763897, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-0.005173863843083382), point2D_Double1.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Point point0 = new Point(2754, 2754);
      assertEquals(2754.0, point0.getY(), 0.01);
      assertEquals(2754.0, point0.getX(), 0.01);
      assertNotNull(point0);
      assertEquals(2754, point0.y);
      assertEquals(2754, point0.x);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)GeometricUtilities.getCenter((Point2D) point0, (Point2D) point0);
      assertEquals(2754.0, point0.getY(), 0.01);
      assertEquals(2754.0, point0.getX(), 0.01);
      assertNotNull(point2D_Double0);
      assertEquals(2754, point0.y);
      assertEquals(2754, point0.x);
      assertEquals(2754.0, point2D_Double0.y, 0.01);
      assertEquals(2754.0, point2D_Double0.x, 0.01);
      
      Point2D.Double point2D_Double1 = (Point2D.Double)GeometricUtilities.project((Point2D) point2D_Double0, (Point2D) point2D_Double0, (double) 2754);
      assertEquals(2754.0, point0.getY(), 0.01);
      assertEquals(2754.0, point0.getX(), 0.01);
      assertNotNull(point2D_Double1);
      assertEquals(2754, point0.y);
      assertEquals(2754, point0.x);
      assertEquals(2754.0, point2D_Double0.y, 0.01);
      assertEquals(2754.0, point2D_Double0.x, 0.01);
      assertEquals(Double.NaN, point2D_Double1.x, 0.01);
      assertEquals(Double.NaN, point2D_Double1.y, 0.01);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertNotNull(point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)GeometricUtilities.getCircle(point0, 475.959192381);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(475.959192381, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(475.959192381, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals((-475.959192381), ellipse2D_Double0.getMinX(), 0.01);
      assertEquals((-475.959192381), ellipse2D_Double0.getMinY(), 0.01);
      assertNotNull(ellipse2D_Double0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals((-475.959192381), ellipse2D_Double0.x, 0.01);
      assertEquals(951.918384762, ellipse2D_Double0.height, 0.01);
      assertEquals((-475.959192381), ellipse2D_Double0.y, 0.01);
      assertEquals(951.918384762, ellipse2D_Double0.width, 0.01);
      
      boolean boolean0 = GeometricUtilities.intersects((Ellipse2D) ellipse2D_Double0, (Ellipse2D) ellipse2D_Double0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(475.959192381, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(475.959192381, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals((-475.959192381), ellipse2D_Double0.getMinX(), 0.01);
      assertEquals((-475.959192381), ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals((-475.959192381), ellipse2D_Double0.x, 0.01);
      assertEquals(951.918384762, ellipse2D_Double0.height, 0.01);
      assertEquals((-475.959192381), ellipse2D_Double0.y, 0.01);
      assertEquals(951.918384762, ellipse2D_Double0.width, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      
      Ellipse2D.Float ellipse2D_Float1 = new Ellipse2D.Float(0, 2809.8608F, 0, 719.0F);
      assertEquals(3169.36083984375, ellipse2D_Float1.getCenterY(), 0.01);
      assertEquals(3528.86083984375, ellipse2D_Float1.getMaxY(), 0.01);
      assertEquals(2809.86083984375, ellipse2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float1.getMaxX(), 0.01);
      assertNotNull(ellipse2D_Float1);
      assertEquals(0.0F, ellipse2D_Float1.width, 0.01F);
      assertEquals(719.0F, ellipse2D_Float1.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float1.x, 0.01F);
      assertEquals(2809.8608F, ellipse2D_Float1.y, 0.01F);
      assertFalse(ellipse2D_Float1.equals((Object)ellipse2D_Float0));
      
      boolean boolean0 = GeometricUtilities.intersects((Ellipse2D) ellipse2D_Float0, (Ellipse2D) ellipse2D_Float1);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(3169.36083984375, ellipse2D_Float1.getCenterY(), 0.01);
      assertEquals(3528.86083984375, ellipse2D_Float1.getMaxY(), 0.01);
      assertEquals(2809.86083984375, ellipse2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float1.width, 0.01F);
      assertEquals(719.0F, ellipse2D_Float1.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float1.x, 0.01F);
      assertEquals(2809.8608F, ellipse2D_Float1.y, 0.01F);
      assertNotSame(ellipse2D_Float0, ellipse2D_Float1);
      assertNotSame(ellipse2D_Float1, ellipse2D_Float0);
      assertFalse(ellipse2D_Float0.equals((Object)ellipse2D_Float1));
      assertFalse(ellipse2D_Float1.equals((Object)ellipse2D_Float0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float((-2084.38F), (-2084.38F), 0, (-2084.38F));
      assertEquals((-2084.3798828125), ellipse2D_Float0.getMinX(), 0.01);
      assertEquals((-3126.56982421875), ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals((-2084.3798828125), ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals((-2084.3798828125), ellipse2D_Float0.getMinY(), 0.01);
      assertEquals((-2084.3798828125), ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals((-4168.759765625), ellipse2D_Float0.getMaxY(), 0.01);
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals((-2084.38F), ellipse2D_Float0.y, 0.01F);
      assertEquals((-2084.38F), ellipse2D_Float0.x, 0.01F);
      assertEquals((-2084.38F), ellipse2D_Float0.height, 0.01F);
      
      ellipse2D_Float0.setFrameFromCenter(1.0, (-2731.34069099393), 1395.0, 0.0);
      assertEquals((-5462.68115234375), ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(1395.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals((-1393.0), ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(1.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals((-2731.340576171875), ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals((-1393.0F), ellipse2D_Float0.x, 0.01F);
      assertEquals(2788.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(5462.681F, ellipse2D_Float0.height, 0.01F);
      assertEquals((-5462.681F), ellipse2D_Float0.y, 0.01F);
      
      boolean boolean0 = GeometricUtilities.intersects((Ellipse2D) ellipse2D_Float0, (Ellipse2D) ellipse2D_Float0);
      assertEquals((-5462.68115234375), ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(1395.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals((-1393.0), ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(1.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals((-2731.340576171875), ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals((-1393.0F), ellipse2D_Float0.x, 0.01F);
      assertEquals(2788.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(5462.681F, ellipse2D_Float0.height, 0.01F);
      assertEquals((-5462.681F), ellipse2D_Float0.y, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1778803.3673502535, 0.0, 0, 0.0F);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1778803.5, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(1778803.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1778803.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(1778804.0, rectangle0.getMaxX(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1778803, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(1, rectangle0.width);
      assertEquals(0, rectangle0.y);
      
      boolean boolean0 = GeometricUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1778803.5, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(1778803.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1778803.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(1778804.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1778803.3673502535, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1778803, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(1, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 0.0, (-2604.6754875722677), (-1303.09897062501));
      assertEquals((-1302.3377437861338), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-2604.6754875722677), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-651.549485312505), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1303.09897062501), rectangle2D_Double0.getMaxY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals((-1303.09897062501), rectangle2D_Double0.height, 0.01);
      assertEquals((-2604.6754875722677), rectangle2D_Double0.width, 0.01);
      
      boolean boolean0 = GeometricUtilities.intersects((Rectangle2D) rectangle2D_Double0, (Rectangle2D) rectangle2D_Double0);
      assertEquals((-1302.3377437861338), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-2604.6754875722677), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-651.549485312505), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1303.09897062501), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals((-1303.09897062501), rectangle2D_Double0.height, 0.01);
      assertEquals((-2604.6754875722677), rectangle2D_Double0.width, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Point2D.Float point2D_Float0 = new Point2D.Float(0.0F, 0.0F);
      assertNotNull(point2D_Float0);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      
      Point point0 = new Point((-1), 793);
      assertEquals((-1.0), point0.getX(), 0.01);
      assertEquals(793.0, point0.getY(), 0.01);
      assertNotNull(point0);
      assertEquals((-1), point0.x);
      assertEquals(793, point0.y);
      
      List<Point2D> list0 = GeometricUtilities.getPointsBetweenPoints(point0, point2D_Float0);
      assertEquals((-1.0), point0.getX(), 0.01);
      assertEquals(793.0, point0.getY(), 0.01);
      assertEquals(794, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals((-1), point0.x);
      assertEquals(793, point0.y);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, (-1325.0F), 999.2129F, 176.52946F);
      assertNotNull(line2D_Float0);
      assertEquals(999.2129F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(176.52946F, line2D_Float0.y2, 0.01F);
      assertEquals((-1325.0F), line2D_Float0.y1, 0.01F);
      
      Point2D.Double point2D_Double0 = new Point2D.Double((-3852.3743578), 999.2129F);
      assertNotNull(point2D_Double0);
      assertEquals(999.212890625, point2D_Double0.y, 0.01);
      assertEquals((-3852.3743578), point2D_Double0.x, 0.01);
      
      Point2D.Double point2D_Double1 = (Point2D.Double)GeometricUtilities.getPerpendicularIntersection(point2D_Double0, line2D_Float0);
      assertNotNull(point2D_Double1);
      assertEquals(999.2129F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(176.52946F, line2D_Float0.y2, 0.01F);
      assertEquals((-1325.0F), line2D_Float0.y1, 0.01F);
      assertEquals(999.212890625, point2D_Double0.y, 0.01);
      assertEquals((-3852.3743578), point2D_Double0.x, 0.01);
      assertEquals((-110.41596918504501), point2D_Double1.x, 0.01);
      assertEquals((-1490.9234309952162), point2D_Double1.y, 0.01);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float float0 = GeometricUtilities.getDeltaY((double) 0.0F);
      assertEquals(0.9999997F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float float0 = GeometricUtilities.getDeltaX(0.0);
      assertEquals((-7.670362E-4F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.01745240643728351, 0.0F);
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.01745240643728351, point2D_Double0.x, 0.01);
      
      boolean boolean0 = GeometricUtilities.equals((Point2D) point2D_Double0, (Point2D) point2D_Double0, (double) 0.0F);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.01745240643728351, point2D_Double0.x, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-97.7F), (-97.7F), (-97.7F), 0.0F);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-146.54999542236328), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-195.39999389648438), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getMinY(), 0.01);
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals((-97.7F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-97.7F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-97.7F), rectangle2D_Float0.width, 0.01F);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)GeometricUtilities.getCenter((RectangularShape) rectangle2D_Float0);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-146.54999542236328), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-195.39999389648438), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getMinY(), 0.01);
      assertNotNull(point2D_Double0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals((-97.7F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-97.7F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-97.7F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-97.69999694824219), point2D_Double0.y, 0.01);
      assertEquals((-146.54999542236328), point2D_Double0.x, 0.01);
      
      double double0 = GeometricUtilities.distance((Rectangle2D) rectangle2D_Float0, (Point2D) point2D_Double0);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-146.54999542236328), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-195.39999389648438), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals((-97.7F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-97.7F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-97.7F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-97.69999694824219), point2D_Double0.y, 0.01);
      assertEquals((-146.54999542236328), point2D_Double0.x, 0.01);
      assertEquals(48.849998474121094, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(16384.0, 16384.0);
      assertNotNull(point2D_Double0);
      assertEquals(16384.0, point2D_Double0.x, 0.01);
      assertEquals(16384.0, point2D_Double0.y, 0.01);
      
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      
      Point2D.Double point2D_Double1 = (Point2D.Double)GeometricUtilities.getPerpendicularIntersection(point2D_Double0, line2D_Float0);
      assertNotNull(point2D_Double1);
      assertEquals(16384.0, point2D_Double0.x, 0.01);
      assertEquals(16384.0, point2D_Double0.y, 0.01);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(Double.NaN, point2D_Double1.y, 0.01);
      assertEquals(Double.NaN, point2D_Double1.x, 0.01);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      
      double double0 = GeometricUtilities.distance((Point2D) point2D_Double0, (Point2D) point2D_Double1);
      assertEquals(16384.0, point2D_Double0.x, 0.01);
      assertEquals(16384.0, point2D_Double0.y, 0.01);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(Double.NaN, point2D_Double1.y, 0.01);
      assertEquals(Double.NaN, point2D_Double1.x, 0.01);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(16384.0, 16384.0);
      assertNotNull(point2D_Double0);
      assertEquals(16384.0, point2D_Double0.y, 0.01);
      assertEquals(16384.0, point2D_Double0.x, 0.01);
      
      double double0 = GeometricUtilities.distance((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      assertEquals(16384.0, point2D_Double0.y, 0.01);
      assertEquals(16384.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = GeometricUtilities.distance((-1.0), (double) 0.0F, 0.0, (double) 0.9999997F);
      assertEquals(1.4142133516388682, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = GeometricUtilities.calcRotationAngleInDegrees((double) 4096.0F, (-1993.106278), 0.0, (-241.3355439153));
      assertEquals(293.1553495340395, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Point2D.Float point2D_Float0 = new Point2D.Float(0.0F, 0.0F);
      assertNotNull(point2D_Float0);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)GeometricUtilities.getPointOnCircle(point2D_Float0, (-1), 2.0);
      assertNotNull(point2D_Double0);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals((-0.9993908270190958), point2D_Double0.x, 0.01);
      assertEquals((-0.03489949670250097), point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Dimension dimension0 = (Dimension)GeometricUtilities.scaleWithRatio(259.299349675819, 93.735, 0);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Shape shape0 = GeometricUtilities.scaleShape((Shape) null, (-778.2957372750574));
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = GeometricUtilities.normalizeAngle(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      
      List<Point2D> list0 = GeometricUtilities.getPoints((Rectangle2D) rectangle0);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertNotNull(list0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Path2D.Double path2D_Double0 = new Path2D.Double();
      assertEquals(1, path2D_Double0.getWindingRule());
      assertNotNull(path2D_Double0);
      
      List<Point2D> list0 = GeometricUtilities.getPoints((Path2D) path2D_Double0);
      assertEquals(1, path2D_Double0.getWindingRule());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-97.7F), (-97.7F), (-97.7F), 0.0F);
      assertEquals((-146.54999542236328), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-195.39999389648438), rectangle2D_Float0.getMaxX(), 0.01);
      assertNotNull(rectangle2D_Float0);
      assertEquals((-97.7F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-97.7F), rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals((-97.7F), rectangle2D_Float0.y, 0.01F);
      
      Line2D[] line2DArray0 = GeometricUtilities.getLines(rectangle2D_Float0);
      assertEquals((-146.54999542236328), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-97.69999694824219), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-195.39999389648438), rectangle2D_Float0.getMaxX(), 0.01);
      assertNotNull(line2DArray0);
      assertEquals((-97.7F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-97.7F), rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals((-97.7F), rectangle2D_Float0.y, 0.01F);
      assertEquals(4, line2DArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float((-2810.673F), 0.0F, (-1171.0326F), (-394.0F), 651.8986F, 0.0F);
      assertEquals((-3396.1893920898438), roundRectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-197.0), roundRectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-3981.7056884765625), roundRectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-394.0), roundRectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, roundRectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-2810.673095703125), roundRectangle2D_Float0.getMinX(), 0.01);
      assertNotNull(roundRectangle2D_Float0);
      assertEquals((-2810.673F), roundRectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.archeight, 0.01F);
      assertEquals((-1171.0326F), roundRectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.y, 0.01F);
      assertEquals((-394.0F), roundRectangle2D_Float0.height, 0.01F);
      assertEquals(651.8986F, roundRectangle2D_Float0.arcwidth, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)roundRectangle2D_Float0.getBounds2D();
      assertEquals((-3396.1893920898438), roundRectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-197.0), roundRectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-3981.7056884765625), roundRectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-394.0), roundRectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, roundRectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-2810.673095703125), roundRectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-394.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-3981.7056884765625), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-2810.673095703125), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-3396.1893920898438), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-197.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Float0);
      assertEquals((-2810.673F), roundRectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.archeight, 0.01F);
      assertEquals((-1171.0326F), roundRectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.y, 0.01F);
      assertEquals((-394.0F), roundRectangle2D_Float0.height, 0.01F);
      assertEquals(651.8986F, roundRectangle2D_Float0.arcwidth, 0.01F);
      assertEquals((-1171.0326F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-394.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-2810.673F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      
      double double0 = GeometricUtilities.getDiagonal(rectangle2D_Float0);
      assertEquals((-3396.1893920898438), roundRectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-197.0), roundRectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-3981.7056884765625), roundRectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-394.0), roundRectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, roundRectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-2810.673095703125), roundRectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-394.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-3981.7056884765625), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-2810.673095703125), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-3396.1893920898438), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-197.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-2810.673F), roundRectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.archeight, 0.01F);
      assertEquals((-1171.0326F), roundRectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.y, 0.01F);
      assertEquals((-394.0F), roundRectangle2D_Float0.height, 0.01F);
      assertEquals(651.8986F, roundRectangle2D_Float0.arcwidth, 0.01F);
      assertEquals((-1171.0326F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-394.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-2810.673F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(1235.5376697364106, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = GeometricUtilities.getDeltaY(0.0, (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = GeometricUtilities.getDeltaY(0.0, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = GeometricUtilities.getDeltaX(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = GeometricUtilities.getDeltaX((-1.0), (-1.0));
      assertEquals(0.01745240643728351, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Area area0 = new Area();
      assertTrue(area0.isEmpty());
      assertNotNull(area0);
      
      List<Line2D.Double> list0 = GeometricUtilities.getConstrainingLines(area0);
      assertTrue(area0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertEquals((-1.5), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1.5), rectangle2D_Float0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Float0);
      assertEquals((-1.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.y, 0.01F);
      
      Rectangle rectangle0 = new Rectangle(1, (-62));
      assertEquals((-31.0), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-62.0), rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-62.0), rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(1, rectangle0.width);
      assertEquals((-62), rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangle2D_Float0.createUnion(rectangle0);
      assertEquals((-1.5), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1.5), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-31.0), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-62.0), rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-62.0), rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-1.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(1, rectangle0.width);
      assertEquals((-62), rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(2.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-2.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)GeometricUtilities.getCenter((RectangularShape) rectangle2D_Double0);
      assertEquals((-1.5), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1.5), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-31.0), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-62.0), rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-62.0), rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertNotNull(point2D_Double0);
      assertEquals((-1.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(1, rectangle0.width);
      assertEquals((-62), rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(2.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-2.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-1.5), point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      Point2D[] point2DArray0 = new Point2D[5];
      point2DArray0[0] = (Point2D) point2D_Double0;
      point2DArray0[1] = (Point2D) point2D_Double0;
      point2DArray0[2] = (Point2D) point2D_Double0;
      point2DArray0[3] = (Point2D) point2D_Double0;
      point2DArray0[4] = (Point2D) point2D_Double0;
      Line2D[] line2DArray0 = GeometricUtilities.getConnectingLines(point2D_Double0, point2DArray0);
      assertEquals((-1.5), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1.5), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-31.0), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-62.0), rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-62.0), rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertNotNull(line2DArray0);
      assertEquals((-1.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(1, rectangle0.width);
      assertEquals((-62), rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(2.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-2.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-1.5), point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(5, point2DArray0.length);
      assertEquals(5, line2DArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertEquals((-1.5), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1.5), rectangle2D_Float0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Float0);
      assertEquals((-1.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.x, 0.01F);
      
      Rectangle rectangle0 = new Rectangle(1, (-62));
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals((-31.0), rectangle0.getCenterY(), 0.01);
      assertEquals((-62.0), rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-62.0), rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals((-62), rectangle0.height);
      assertEquals(0, rectangle0.x);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangle2D_Float0.createUnion(rectangle0);
      assertEquals((-1.5), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1.5), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals((-31.0), rectangle0.getCenterY(), 0.01);
      assertEquals((-62.0), rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-62.0), rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-1.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0, rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals((-62), rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(2.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-2.0), rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)GeometricUtilities.getCenter((RectangularShape) rectangle2D_Double0);
      assertEquals((-1.5), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1.5), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals((-31.0), rectangle0.getCenterY(), 0.01);
      assertEquals((-62.0), rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-62.0), rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertNotNull(point2D_Double0);
      assertEquals((-1.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0, rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals((-62), rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(2.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-2.0), rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-1.5), point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)GeometricUtilities.getCircle(point2D_Double0, (-1.0F));
      assertEquals((-1.5), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1.5), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals((-31.0), rectangle0.getCenterY(), 0.01);
      assertEquals((-62.0), rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-62.0), rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1.0), ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals((-0.5), ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(1.0, ellipse2D_Double0.getMinX(), 0.01);
      assertEquals((-2.5), ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals((-1.5), ellipse2D_Double0.getCenterY(), 0.01);
      assertNotNull(ellipse2D_Double0);
      assertEquals((-1.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0, rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals((-62), rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(2.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-2.0), rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-1.5), point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals((-0.5), ellipse2D_Double0.y, 0.01);
      assertEquals(1.0, ellipse2D_Double0.x, 0.01);
      assertEquals((-2.0), ellipse2D_Double0.height, 0.01);
      assertEquals((-2.0), ellipse2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, (-532.845F), 1875.22F, 0.0F, 1913.578F);
      assertEquals((-532.844970703125), affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1913.5780029296875, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1875.219970703125, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getScaleX(), 0.01);
      assertNotNull(affineTransform0);
      
      Point point0 = new Point(2335, 4095);
      assertEquals(4095.0, point0.getY(), 0.01);
      assertEquals(2335.0, point0.getX(), 0.01);
      assertNotNull(point0);
      assertEquals(2335, point0.x);
      assertEquals(4095, point0.y);
      
      Point point1 = (Point)affineTransform0.deltaTransform((Point2D) point0, (Point2D) point0);
      assertEquals((-532.844970703125), affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1913.5780029296875, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1875.219970703125, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getScaleX(), 0.01);
      assertEquals((-2182000.0), point0.getX(), 0.01);
      assertEquals(7679026.0, point0.getY(), 0.01);
      assertEquals((-2182000.0), point1.getX(), 0.01);
      assertEquals(7679026.0, point1.getY(), 0.01);
      assertNotNull(point1);
      assertEquals((-2182000), point0.x);
      assertEquals(7679026, point0.y);
      assertEquals((-2182000), point1.x);
      assertEquals(7679026, point1.y);
      assertSame(point0, point1);
      assertSame(point1, point0);
      
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)GeometricUtilities.getCircle(point1, 0.0F);
      assertEquals((-532.844970703125), affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1913.5780029296875, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1875.219970703125, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getScaleX(), 0.01);
      assertEquals((-2182000.0), point0.getX(), 0.01);
      assertEquals(7679026.0, point0.getY(), 0.01);
      assertEquals((-2182000.0), point1.getX(), 0.01);
      assertEquals(7679026.0, point1.getY(), 0.01);
      assertEquals(7679026.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals((-2182000.0), ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(7679026.0, ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(7679026.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals((-2182000.0), ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals((-2182000.0), ellipse2D_Double0.getMinX(), 0.01);
      assertNotNull(ellipse2D_Double0);
      assertEquals((-2182000), point0.x);
      assertEquals(7679026, point0.y);
      assertEquals((-2182000), point1.x);
      assertEquals(7679026, point1.y);
      assertEquals(7679026.0, ellipse2D_Double0.y, 0.01);
      assertEquals((-2182000.0), ellipse2D_Double0.x, 0.01);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01);
      assertSame(point0, point1);
      assertSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)GeometricUtilities.extrude(rectangle2D_Double0, 0.0);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      
      Rectangle rectangle0 = new Rectangle(dimension0);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      rectangle0.setFrame(1701403.3259460817, 0.0, (double) 0, 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.5, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(1701404.0, rectangle0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle0.getMaxY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(1701403.0, rectangle0.getMinX(), 0.01);
      assertEquals(1701403.0, rectangle0.getX(), 0.01);
      assertEquals(1701403.5, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(1701403, rectangle0.x);
      assertEquals(1, rectangle0.width);
      assertEquals(1, rectangle0.height);
      assertEquals(0, rectangle0.y);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)GeometricUtilities.extrude(rectangle0, 1);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.5, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(1701404.0, rectangle0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle0.getMaxY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(1701403.0, rectangle0.getMinX(), 0.01);
      assertEquals(1701403.0, rectangle0.getX(), 0.01);
      assertEquals(1701403.5, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertEquals(1701402.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1701403.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1701405.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(1701403, rectangle0.x);
      assertEquals(1, rectangle0.width);
      assertEquals(1, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(3.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1701402.0, rectangle2D_Double0.x, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01);
      assertEquals(3.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(4.0, (-1142.91804770312), 0.0, 39.44023110469956, 3072.3320767964765, 4.0);
      assertEquals((-1103.4778165984205), roundRectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1123.1979321507702), roundRectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1142.91804770312), roundRectangle2D_Double0.getMinY(), 0.01);
      assertEquals(4.0, roundRectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(4.0, roundRectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(4.0, roundRectangle2D_Double0.getMinX(), 0.01);
      assertNotNull(roundRectangle2D_Double0);
      assertEquals(39.44023110469956, roundRectangle2D_Double0.height, 0.01);
      assertEquals(4.0, roundRectangle2D_Double0.x, 0.01);
      assertEquals(3072.3320767964765, roundRectangle2D_Double0.arcwidth, 0.01);
      assertEquals(0.0, roundRectangle2D_Double0.width, 0.01);
      assertEquals(4.0, roundRectangle2D_Double0.archeight, 0.01);
      assertEquals((-1142.91804770312), roundRectangle2D_Double0.y, 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)roundRectangle2D_Double0.getBounds2D();
      assertEquals((-1103.4778165984205), roundRectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1123.1979321507702), roundRectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1142.91804770312), roundRectangle2D_Double0.getMinY(), 0.01);
      assertEquals(4.0, roundRectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(4.0, roundRectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(4.0, roundRectangle2D_Double0.getMinX(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1103.4778165984205), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1142.91804770312), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1123.1979321507702), rectangle2D_Double0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(39.44023110469956, roundRectangle2D_Double0.height, 0.01);
      assertEquals(4.0, roundRectangle2D_Double0.x, 0.01);
      assertEquals(3072.3320767964765, roundRectangle2D_Double0.arcwidth, 0.01);
      assertEquals(0.0, roundRectangle2D_Double0.width, 0.01);
      assertEquals(4.0, roundRectangle2D_Double0.archeight, 0.01);
      assertEquals((-1142.91804770312), roundRectangle2D_Double0.y, 0.01);
      assertEquals(39.44023110469956, rectangle2D_Double0.height, 0.01);
      assertEquals((-1142.91804770312), rectangle2D_Double0.y, 0.01);
      assertEquals(4.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)GeometricUtilities.extrude(rectangle2D_Double0, 121.0);
      assertEquals((-1103.4778165984205), roundRectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1123.1979321507702), roundRectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1142.91804770312), roundRectangle2D_Double0.getMinY(), 0.01);
      assertEquals(4.0, roundRectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(4.0, roundRectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(4.0, roundRectangle2D_Double0.getMinX(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1103.4778165984205), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1142.91804770312), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1123.1979321507702), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1263.91804770312), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-982.4778165984204), rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(125.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-1123.1979321507702), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-117.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(4.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertEquals(39.44023110469956, roundRectangle2D_Double0.height, 0.01);
      assertEquals(4.0, roundRectangle2D_Double0.x, 0.01);
      assertEquals(3072.3320767964765, roundRectangle2D_Double0.arcwidth, 0.01);
      assertEquals(0.0, roundRectangle2D_Double0.width, 0.01);
      assertEquals(4.0, roundRectangle2D_Double0.archeight, 0.01);
      assertEquals((-1142.91804770312), roundRectangle2D_Double0.y, 0.01);
      assertEquals(39.44023110469956, rectangle2D_Double0.height, 0.01);
      assertEquals((-1142.91804770312), rectangle2D_Double0.y, 0.01);
      assertEquals(4.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-117.0), rectangle2D_Double1.x, 0.01);
      assertEquals(281.4402311046996, rectangle2D_Double1.height, 0.01);
      assertEquals(242.0, rectangle2D_Double1.width, 0.01);
      assertEquals((-1263.91804770312), rectangle2D_Double1.y, 0.01);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      
      Rectangle rectangle0 = new Rectangle((-731), (-731), (-731), 0);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-731.0), rectangle0.getY(), 0.01);
      assertEquals((-731.0), rectangle0.getX(), 0.01);
      assertEquals((-731.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals((-731.0), rectangle0.getCenterY(), 0.01);
      assertEquals((-1462.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-731.0), rectangle0.getMinY(), 0.01);
      assertEquals((-731.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-1096.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-731.0), rectangle0.getWidth(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals((-731), rectangle0.width);
      assertEquals((-731), rectangle0.x);
      assertEquals((-731), rectangle0.y);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.createUnion(rectangle0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-731.0), rectangle0.getY(), 0.01);
      assertEquals((-731.0), rectangle0.getX(), 0.01);
      assertEquals((-731.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals((-731.0), rectangle0.getCenterY(), 0.01);
      assertEquals((-1462.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-731.0), rectangle0.getMinY(), 0.01);
      assertEquals((-731.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-1096.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-731.0), rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-365.5), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-365.5), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-731.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-731.0), rectangle2D_Double1.getMinY(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals((-731), rectangle0.width);
      assertEquals((-731), rectangle0.x);
      assertEquals((-731), rectangle0.y);
      assertEquals(731.0, rectangle2D_Double1.width, 0.01);
      assertEquals((-731.0), rectangle2D_Double1.y, 0.01);
      assertEquals((-731.0), rectangle2D_Double1.x, 0.01);
      assertEquals(731.0, rectangle2D_Double1.height, 0.01);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)GeometricUtilities.extrude(rectangle2D_Double1, (-4030.2863));
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-731.0), rectangle0.getY(), 0.01);
      assertEquals((-731.0), rectangle0.getX(), 0.01);
      assertEquals((-731.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals((-731.0), rectangle0.getCenterY(), 0.01);
      assertEquals((-1462.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-731.0), rectangle0.getMinY(), 0.01);
      assertEquals((-731.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-1096.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-731.0), rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-365.5), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-365.5), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-731.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-731.0), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-4030.2863), rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals((-365.5), rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals((-4030.2863), rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals((-365.5), rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(3299.2863, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(3299.2863, rectangle2D_Double2.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double2);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals((-731), rectangle0.width);
      assertEquals((-731), rectangle0.x);
      assertEquals((-731), rectangle0.y);
      assertEquals(731.0, rectangle2D_Double1.width, 0.01);
      assertEquals((-731.0), rectangle2D_Double1.y, 0.01);
      assertEquals((-731.0), rectangle2D_Double1.x, 0.01);
      assertEquals(731.0, rectangle2D_Double1.height, 0.01);
      assertEquals(3299.2863, rectangle2D_Double2.x, 0.01);
      assertEquals((-7329.5726), rectangle2D_Double2.height, 0.01);
      assertEquals(3299.2863, rectangle2D_Double2.y, 0.01);
      assertEquals((-7329.5726), rectangle2D_Double2.width, 0.01);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Point2D.Double point2D_Double0 = (Point2D.Double)GeometricUtilities.getCenter(1162.6004, 1162.6004, 1406.37769055117, 630.152552);
      assertNotNull(point2D_Double0);
      assertEquals(1284.4890452755849, point2D_Double0.x, 0.01);
      assertEquals(896.376476, point2D_Double0.y, 0.01);
      
      Area area0 = new Area();
      assertTrue(area0.isEmpty());
      assertNotNull(area0);
      
      Rectangle rectangle0 = area0.getBounds();
      assertTrue(area0.isEmpty());
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      
      double double0 = GeometricUtilities.distance((Rectangle2D) rectangle0, (Point2D) point2D_Double0);
      assertTrue(area0.isEmpty());
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(1284.4890452755849, point2D_Double0.x, 0.01);
      assertEquals(896.376476, point2D_Double0.y, 0.01);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(1566.3342217289267, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 0.0, 0.5, 0.0);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.25, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.5, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.5, rectangle2D_Double0.width, 0.01);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.25, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.5, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.5, rectangle2D_Double0.width, 0.01);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals(0, rectangle0.height);
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      Point2D.Double point2D_Double1 = (Point2D.Double)GeometricUtilities.getCenter((RectangularShape) rectangle0);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.25, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.5, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertNotNull(point2D_Double1);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.5, rectangle2D_Double0.width, 0.01);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.5, point2D_Double1.x, 0.01);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      
      double double0 = GeometricUtilities.distance((Point2D) point2D_Double0, (Point2D) point2D_Double1);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.25, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.5, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.5, rectangle2D_Double0.width, 0.01);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.5, point2D_Double1.x, 0.01);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = GeometricUtilities.distance(1484.8, (double) 0, (double) 0, (double) 0);
      assertEquals(1484.8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      
      point0.y = (-485);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals((-485.0), point0.getY(), 0.01);
      
      point0.y = 14;
      assertEquals(14.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      
      Point2D.Float point2D_Float0 = new Point2D.Float();
      assertNotNull(point2D_Float0);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      
      double double0 = GeometricUtilities.calcRotationAngleInDegrees((Point2D) point2D_Float0, (Point2D) point0);
      assertEquals(14.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(14, point0.y);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.shapeIntersects((Shape) null, (Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.scaleRect((Rectangle2D) null, 50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertNotNull(point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      // Undeclared exception!
      try { 
        GeometricUtilities.rayCastPoints(point0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.project((Point2D) null, (Point2D) null, 4.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.project((Point2D) null, 463.073486328125, 463.073486328125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.intersects((Ellipse2D) null, (Ellipse2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)GeometricUtilities.project((Point2D) point0, (Point2D) point0, (double) 0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertNotNull(point2D_Double0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(Double.NaN, point2D_Double0.y, 0.01);
      assertEquals(Double.NaN, point2D_Double0.x, 0.01);
      
      // Undeclared exception!
      GeometricUtilities.getPointsBetweenPoints(point2D_Double0, point0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.getPointsBetweenPoints((Point2D) null, (Point2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.getPoints((Path2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      
      // Undeclared exception!
      try { 
        GeometricUtilities.getPerpendicularIntersection((Point2D) null, line2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      
      // Undeclared exception!
      try { 
        GeometricUtilities.getIntersectionPoints(line2D_Double0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      
      // Undeclared exception!
      try { 
        GeometricUtilities.getIntersectionPoint((Line2D) line2D_Double0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.getIntersectionPoint((Line2D) null, (Line2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.getConstrainingLines((Area) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.getCircle((Point2D) null, (-176.29631F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.getCenter((RectangularShape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.getCenter((Line2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.getAveragePosition((Collection<Point2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.extrude((Rectangle2D) null, (-2604.6754875722677));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Point2D.Float point2D_Float0 = new Point2D.Float((-1353.6154F), (-1353.6154F));
      assertNotNull(point2D_Float0);
      assertEquals((-1353.6154F), point2D_Float0.y, 0.01F);
      assertEquals((-1353.6154F), point2D_Float0.x, 0.01F);
      
      Line2D.Float line2D_Float0 = new Line2D.Float(754.7471F, (-1353.6154F), (-1.0F), (-1.0F));
      assertNotNull(line2D_Float0);
      assertEquals((-1.0F), line2D_Float0.x2, 0.01F);
      assertEquals((-1.0F), line2D_Float0.y2, 0.01F);
      assertEquals(754.7471F, line2D_Float0.x1, 0.01F);
      assertEquals((-1353.6154F), line2D_Float0.y1, 0.01F);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)GeometricUtilities.getPerpendicularIntersection(point2D_Float0, line2D_Float0);
      assertNotNull(point2D_Double0);
      assertEquals((-1353.6154F), point2D_Float0.y, 0.01F);
      assertEquals((-1353.6154F), point2D_Float0.x, 0.01F);
      assertEquals((-1.0F), line2D_Float0.x2, 0.01F);
      assertEquals((-1.0F), line2D_Float0.y2, 0.01F);
      assertEquals(754.7471F, line2D_Float0.x1, 0.01F);
      assertEquals((-1353.6154F), line2D_Float0.y1, 0.01F);
      assertEquals((-455.86787967493285), point2D_Double0.y, 0.01);
      assertEquals(253.14842867598918, point2D_Double0.x, 0.01);
      
      // Undeclared exception!
      try { 
        GeometricUtilities.equals((Point2D) null, (Point2D) point2D_Double0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(4.441485600169497, 4.441485600169497, 4.441485600169497, 4.441485600169497);
      assertEquals(4.441485600169497, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(4.441485600169497, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(8.882971200338995, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(8.882971200338995, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(6.6622284002542465, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(6.6622284002542465, rectangle2D_Double0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(4.441485600169497, rectangle2D_Double0.height, 0.01);
      assertEquals(4.441485600169497, rectangle2D_Double0.x, 0.01);
      assertEquals(4.441485600169497, rectangle2D_Double0.width, 0.01);
      assertEquals(4.441485600169497, rectangle2D_Double0.y, 0.01);
      
      // Undeclared exception!
      try { 
        GeometricUtilities.distance((Rectangle2D) rectangle2D_Double0, (Point2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.contains((Rectangle2D) null, (Point2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.calcRotationAngleInDegrees((Point2D) null, (Point2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      
      GeneralPath generalPath0 = new GeneralPath(ellipse2D_Float0);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      
      Rectangle rectangle0 = generalPath0.getBounds();
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertNotNull(rectangle0);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      
      boolean boolean0 = GeometricUtilities.shapeIntersects(ellipse2D_Float0, rectangle0);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Dimension dimension0 = (Dimension)GeometricUtilities.scaleWithRatio((-1524.585101), 22.0, (-2147483613));
      assertEquals((-2.147483613E9), dimension0.getHeight(), 0.01);
      assertEquals(2.147483647E9, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      assertEquals(Integer.MAX_VALUE, dimension0.width);
      assertEquals((-2147483613), dimension0.height);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Dimension dimension0 = (Dimension)GeometricUtilities.scaleWithRatio((-680.1), (-680.1), 11);
      assertEquals(11.0, dimension0.getHeight(), 0.01);
      assertEquals(11.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      assertEquals(11, dimension0.width);
      assertEquals(11, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Dimension2D dimension2D0 = GeometricUtilities.scaleWithRatio(0.0, 90.0, 0);
      assertNull(dimension2D0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Point2D.Float point2D_Float0 = new Point2D.Float((-488), 1491.923F);
      assertNotNull(point2D_Float0);
      assertEquals((-488.0F), point2D_Float0.x, 0.01F);
      assertEquals(1491.923F, point2D_Float0.y, 0.01F);
      
      Rectangle rectangle0 = new Rectangle((-488), 0, 0, 22);
      assertEquals((-488.0), rectangle0.getMaxX(), 0.01);
      assertEquals(11.0, rectangle0.getCenterY(), 0.01);
      assertEquals((-488.0), rectangle0.getX(), 0.01);
      assertEquals((-488.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-488.0), rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(22.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(22.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertNotNull(rectangle0);
      assertEquals(22, rectangle0.height);
      assertEquals((-488), rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      
      Point2D[] point2DArray0 = GeometricUtilities.rayCastPoints(point2D_Float0, rectangle0);
      assertEquals((-488.0), rectangle0.getMaxX(), 0.01);
      assertEquals(11.0, rectangle0.getCenterY(), 0.01);
      assertEquals((-488.0), rectangle0.getX(), 0.01);
      assertEquals((-488.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-488.0), rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(22.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(22.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertNotNull(point2DArray0);
      assertEquals((-488.0F), point2D_Float0.x, 0.01F);
      assertEquals(1491.923F, point2D_Float0.y, 0.01F);
      assertEquals(22, rectangle0.height);
      assertEquals((-488), rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(4, point2DArray0.length);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)GeometricUtilities.getAveragePosition(point2DArray0);
      assertEquals((-488.0), rectangle0.getMaxX(), 0.01);
      assertEquals(11.0, rectangle0.getCenterY(), 0.01);
      assertEquals((-488.0), rectangle0.getX(), 0.01);
      assertEquals((-488.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-488.0), rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(22.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(22.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertNotNull(point2D_Double0);
      assertEquals((-488.0F), point2D_Float0.x, 0.01F);
      assertEquals(1491.923F, point2D_Float0.y, 0.01F);
      assertEquals(22, rectangle0.height);
      assertEquals((-488), rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(11.0, point2D_Double0.y, 0.01);
      assertEquals((-488.0), point2D_Double0.x, 0.01);
      assertEquals(4, point2DArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Point2D[] point2DArray0 = new Point2D[0];
      Point2D point2D0 = GeometricUtilities.getAveragePosition(point2DArray0);
      assertNull(point2D0);
      assertEquals(0, point2DArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Point2D[] point2DArray0 = new Point2D[1];
      // Undeclared exception!
      try { 
        GeometricUtilities.getAveragePosition(point2DArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(0.0, 0, 23611.661586604238, (-1.0));
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals((-1.0), line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(23611.661586604238, line2D_Double0.x2, 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)line2D_Double0.getBounds2D();
      assertEquals((-0.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(23611.661586604238, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(11805.830793302119, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals((-1.0), line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(23611.661586604238, line2D_Double0.x2, 0.01);
      assertEquals(23611.661586604238, rectangle2D_Double0.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      
      List<Point2D> list0 = GeometricUtilities.getIntersectionPoints(line2D_Double0, rectangle2D_Double0);
      assertEquals((-0.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(23611.661586604238, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(11805.830793302119, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals((-1.0), line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(23611.661586604238, line2D_Double0.x2, 0.01);
      assertEquals(23611.661586604238, rectangle2D_Double0.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(2669.4941508397997, 841.9916249379, 0.0, 90.0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2713.5125F, 841.9916249379, 841.9916249379, 0.0);
      List<Point2D> list0 = GeometricUtilities.getIntersectionPoints(line2D_Double0, rectangle2D_Double0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float((-1.0F), 360.0F, 2029.0F, 360.0F);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1.0F), 40.0, 2029.0F, 2029.0F);
      List<Point2D> list0 = GeometricUtilities.getIntersectionPoints(line2D_Float0, rectangle2D_Double0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float((-1.0F), 360.0F, 2029.0F, 360.0F);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(360.0F, 40.0, 0.0, (-1.0F), 0.0, 16384.0);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      List<Point2D> list0 = GeometricUtilities.getIntersectionPoints(line2D_Float0, rectangle2D0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(1.0, 1.0, 595.3736656114, 595.3736656114);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      List<Point2D> list0 = GeometricUtilities.getIntersectionPoints(line2D_Double0, rectangle2D0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(253.7, (-2300.88), (-2300.88), (-1303.09897062501));
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-3151.4), 1450808.131801751, (-1303.09897062501), 253.7);
      List<Point2D> list0 = GeometricUtilities.getIntersectionPoints(line2D_Double0, rectangle2D_Double0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(1367.7582312567, (-1303.09897062501), 0, 1828376.8243064617);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      List<Point2D> list0 = GeometricUtilities.getIntersectionPoints(line2D_Double0, rectangle2D0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(0.0, (-1303.09897062501), 0.0, 0.0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 0.0, (-2604.6754875722677), (-1303.09897062501));
      List<Point2D> list0 = GeometricUtilities.getIntersectionPoints(line2D_Double0, rectangle2D_Double0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double((-1.0), (-1.0), 2939.31638855057, 2939.31638855057);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2559.5710401859237, 402.290976007, 0.01, 0.01);
      List<Point2D> list0 = GeometricUtilities.getIntersectionPoints(line2D_Double0, rectangle2D_Double0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(0, 99.07749975120177, 16384.0, 0);
      Line2D.Double line2D_Double1 = new Line2D.Double((-1.0), (-2789.7519551345654), (-1.0), 0.0);
      Point2D point2D0 = GeometricUtilities.getIntersectionPoint((Line2D) line2D_Double1, (Line2D) line2D_Double0);
      assertNull(point2D0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(0.0, (-1303.09897062501), 0.0, 0.0);
      Line2D.Double line2D_Double1 = new Line2D.Double(16384.0, (-2604.6754875722677), 0.0, 0.0);
      Point2D.Double point2D_Double0 = (Point2D.Double)GeometricUtilities.getIntersectionPoint((Line2D) line2D_Double1, (Line2D) line2D_Double0);
      assertEquals(-0.0, point2D_Double0.x, 0.01);
      assertEquals(-0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(841.9916249379, (-1.0), 90.0, (-110.103897816938));
      Line2D.Double line2D_Double1 = new Line2D.Double((-28478.155517578125), 841.9916249379, 3145.0, 2701.0);
      Point2D point2D0 = GeometricUtilities.getIntersectionPoint((Line2D) line2D_Double1, (Line2D) line2D_Double0);
      assertNull(point2D0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(253.7, (-2300.88), (-2300.88), (-1303.09897062501));
      Line2D.Double line2D_Double1 = new Line2D.Double(613.291784, 841.9916249379, (-1303.09897062501), 613.291784);
      Point2D point2D0 = GeometricUtilities.getIntersectionPoint((Line2D) line2D_Double0, (Line2D) line2D_Double1);
      assertNull(point2D0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Point2D.Float point2D_Float0 = new Point2D.Float((-1353.6154F), (-1353.6154F));
      Line2D.Float line2D_Float0 = new Line2D.Float(754.7471F, (-1353.6154F), (-1.0F), (-1.0F));
      Point2D.Double point2D_Double0 = (Point2D.Double)GeometricUtilities.getPerpendicularIntersection(point2D_Float0, line2D_Float0);
      Line2D.Double line2D_Double0 = new Line2D.Double(point2D_Double0, point2D_Double0);
      GeometricUtilities.getIntersectionPoint((Line2D) line2D_Double0, (Line2D) line2D_Float0);
      assertEquals(253.14842867598918, line2D_Double0.x2, 0.01);
      assertEquals((-455.86787967493285), line2D_Double0.y1, 0.01);
      assertEquals(253.14842867598918, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(0.0, (-1303.09897062501), 0.0, 0.0);
      Line2D.Double line2D_Double1 = new Line2D.Double((-1303.09897062501), 0.0, (-2604.6754875722677), 1327.74782);
      Point2D point2D0 = GeometricUtilities.getIntersectionPoint((Line2D) line2D_Double0, (Line2D) line2D_Double1);
      assertNull(point2D0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Point2D[] point2DArray0 = new Point2D[0];
      Line2D[] line2DArray0 = GeometricUtilities.getConnectingLines((Point2D) null, point2DArray0);
      assertEquals(0, line2DArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Point2D[] point2DArray0 = new Point2D[5];
      // Undeclared exception!
      try { 
        GeometricUtilities.getConnectingLines((Point2D) null, point2DArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Point2D.Double point2D_Double0 = (Point2D.Double)GeometricUtilities.getCenter(1.0, 1.0, 1.0, 1.0);
      boolean boolean0 = GeometricUtilities.equals((Point2D) point2D_Double0, (Point2D) point2D_Double0, (-275.3));
      assertFalse(boolean0);
      assertEquals(1.0, point2D_Double0.y, 0.01);
      assertEquals(1.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Point2D.Float point2D_Float0 = new Point2D.Float();
      boolean boolean0 = GeometricUtilities.equals((Point2D) point2D_Float0, (Point2D) point2D_Float0, 1.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      GeneralPath generalPath0 = new GeneralPath(ellipse2D_Float0);
      Rectangle rectangle0 = generalPath0.getBounds();
      Point point0 = new Point(0, 0);
      boolean boolean0 = GeometricUtilities.contains(rectangle0, point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Point point0 = new Point(3, 1);
      boolean boolean0 = GeometricUtilities.contains(rectangle2D_Double0, point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle rectangle0 = generalPath0.getBounds();
      Point point0 = new Point();
      point0.setLocation(0, (-2146990013));
      boolean boolean0 = GeometricUtilities.contains(rectangle0, point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, (-5229.298F), 2017.8402F, 0.0F);
      Point2D.Double point2D_Double0 = (Point2D.Double)GeometricUtilities.getCenter((Line2D) line2D_Float0);
      AffineTransform affineTransform0 = new AffineTransform();
      Path2D.Double path2D_Double0 = new Path2D.Double(line2D_Float0, affineTransform0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)path2D_Double0.getBounds2D();
      boolean boolean0 = GeometricUtilities.contains(rectangle2D_Double0, point2D_Double0);
      assertEquals(1008.9201049804688, point2D_Double0.y, 0.01);
      assertEquals((-2614.64892578125), point2D_Double0.x, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = GeometricUtilities.calcRotationAngleInDegrees((double) 0, (double) 0, (double) 0, (double) 0);
      assertEquals(90.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = GeometricUtilities.getDeltaY(3861.0, (double) 1.0F);
      assertEquals((-0.15643446504022906), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.getCenter((Point2D) null, (Point2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.getPoints((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.getLines((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = GeometricUtilities.getDeltaX(4.0, (double) (-1339.099F));
      assertEquals((-93.4108241661629), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = GeometricUtilities.normalizeAngle((-1866.0));
      assertEquals(294.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = GeometricUtilities.normalizeAngle(338.4814);
      assertEquals(338.4814, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(2669.4941508397997, 841.9916249379, 0.0, 2127.0);
      boolean boolean0 = GeometricUtilities.shapeIntersects(line2D_Double0, line2D_Double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-488), (-488), 0, 16384);
      rectangle0.grow(1927, 16384);
      Path2D.Double path2D_Double0 = new Path2D.Double(rectangle0);
      boolean boolean0 = GeometricUtilities.shapeIntersects(rectangle0, path2D_Double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-488), (-488), 0, 16384);
      rectangle0.grow(1927, 16384);
      boolean boolean0 = GeometricUtilities.shapeIntersects(rectangle0, rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Dimension dimension0 = (Dimension)GeometricUtilities.scaleWithRatio(892.8758579173241, (-2886.010176844555), (-1617));
      assertEquals(5227, dimension0.height);
      assertEquals((-1617), dimension0.width);
      assertNotNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0, 4254.989F, 4254.989F, 4254.989F);
      Path2D.Double path2D_Double0 = (Path2D.Double)GeometricUtilities.scaleRect(rectangle2D_Float0, 0);
      assertEquals(1, path2D_Double0.getWindingRule());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Dimension2D dimension2D0 = GeometricUtilities.scaleWithRatio((-2245.4742932), 0.0F, 16383);
      assertNull(dimension2D0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)GeometricUtilities.scaleRect(rectangle2D_Double0, 2067);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      Ellipse2D.Double ellipse2D_Double1 = new Ellipse2D.Double((-361.2200012207031), (-361.2200012207031), 16384, 1556.0999755859375);
      boolean boolean0 = GeometricUtilities.intersects((Ellipse2D) ellipse2D_Double0, (Ellipse2D) ellipse2D_Double1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      boolean boolean0 = GeometricUtilities.intersects((Ellipse2D) ellipse2D_Double0, (Ellipse2D) ellipse2D_Double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(16384.0, 16384.0, 1828376.8243064617, 2029.0);
      boolean boolean0 = GeometricUtilities.intersects((Ellipse2D) ellipse2D_Double0, (Ellipse2D) ellipse2D_Double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(1413.37071637323, 1.0, 456.689938719, (-1189.014967544), 5118.55567394664, (-1189.014967544));
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      boolean boolean0 = GeometricUtilities.intersects(rectangle2D0, rectangle2D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(90.0, (-1449.68), 2069.0, 505.1740501501096);
      boolean boolean0 = GeometricUtilities.intersects((Rectangle2D) rectangle2D_Double0, (Rectangle2D) rectangle2D_Double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      boolean boolean0 = GeometricUtilities.intersects((Rectangle2D) rectangle2D_Double0, (Rectangle2D) rectangle2D_Double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Point2D.Double point2D_Double1 = (Point2D.Double)GeometricUtilities.getCenter(0.0, 3654.98, 0.0, 0.0);
      List<Point2D> list0 = GeometricUtilities.getPointsBetweenPoints(point2D_Double0, point2D_Double1);
      assertEquals(1828, list0.size());
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertEquals(1827.49, point2D_Double1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = new Point(2709, 0);
      List<Point2D> list0 = GeometricUtilities.getPointsBetweenPoints(point0, point1);
      assertEquals(2710, list0.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Path2D.Float path2D_Float0 = new Path2D.Float(rectangle2D_Float0);
      List<Point2D> list0 = GeometricUtilities.getPoints((Path2D) path2D_Float0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<Point2D> linkedList0 = new LinkedList<Point2D>();
      Point2D point2D0 = GeometricUtilities.getAveragePosition((Collection<Point2D>) linkedList0);
      assertNull(point2D0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = GeometricUtilities.getDiagonal((Rectangle2D) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float((-1262.9802F), (-1262.9802F), 3791.825F, 3791.825F);
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      Point2D.Double point2D_Double0 = (Point2D.Double)GeometricUtilities.getIntersectionPoint((Line2D) line2D_Float0, rectangle2D0);
      assertEquals(3791.824951171875, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      assertEquals(3791.824951171875, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(3.6114981964782964, 3.6114981964782964, 3.6114981964782964, 3.6114981964782964);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      Line2D.Float line2D_Float0 = new Line2D.Float(3, 3, 3, 5);
      Point2D point2D0 = GeometricUtilities.getIntersectionPoint((Line2D) line2D_Float0, (Rectangle2D) rectangle0);
      assertNull(point2D0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      float float0 = GeometricUtilities.getDeltaY((-1.0));
      assertEquals(0.99984443F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      float float0 = GeometricUtilities.getDeltaY(16384.0);
      assertEquals((-0.99767107F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float float0 = GeometricUtilities.getDeltaX((-759.2));
      assertEquals((-0.6326129F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float float0 = GeometricUtilities.getDeltaX((double) 1556.1F);
      assertEquals(0.89901066F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(4.441485600169497, 4.441485600169497, 4.441485600169497, 4.441485600169497);
      Area area0 = new Area(rectangle2D_Double0);
      List<Line2D.Double> list0 = GeometricUtilities.getConstrainingLines(area0);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Point2D.Float point2D_Float0 = new Point2D.Float(0, 850.05F);
      boolean boolean0 = GeometricUtilities.contains(rectangle0, point2D_Float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = GeometricUtilities.calcRotationAngleInDegrees(638.118871620054, (-794.5057026945756), 638.118871620054, 638.118871620054);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.distance((Point2D) null, (Point2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      // Undeclared exception!
      try { 
        GeometricUtilities.translateShape(ellipse2D_Float0, (Point2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Point point0 = new Point();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0, 4258.634F, 4258.634F, 4258.634F);
      Point2D[] point2DArray0 = GeometricUtilities.rayCastPoints(point0, rectangle2D_Float0);
      assertEquals(3, point2DArray0.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Point point0 = new Point();
      Ellipse2D ellipse2D0 = GeometricUtilities.getCircle(point0, 0.0);
      Shape shape0 = GeometricUtilities.scaleShape(ellipse2D0, 0);
      Path2D.Float path2D_Float0 = new Path2D.Float(shape0);
      // Undeclared exception!
      try { 
        GeometricUtilities.getPoints((Path2D) path2D_Float0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("java.awt.geom.Path2D$Float$CopyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Point point0 = new Point();
      double double0 = GeometricUtilities.calcRotationAngleInDegrees((Point2D) point0, (Point2D) point0);
      assertEquals(90.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Point2D point2D0 = GeometricUtilities.getCenter((RectangularShape) rectangle2D_Double0);
      Point2D point2D1 = GeometricUtilities.project(point2D0, point2D0, 1435.18233969808);
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)GeometricUtilities.getCircle(point2D1, 579.3);
      boolean boolean0 = GeometricUtilities.intersects((Ellipse2D) ellipse2D_Double0, (Ellipse2D) ellipse2D_Double0);
      assertEquals(Double.NaN, ellipse2D_Double0.x, 0.01);
      assertEquals(Double.NaN, ellipse2D_Double0.y, 0.01);
      assertFalse(boolean0);
      assertEquals(1158.6, ellipse2D_Double0.width, 0.01);
      assertEquals(1158.6, ellipse2D_Double0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricUtilities.getPointOnCircle((Point2D) null, 235.2140378354834, 235.2140378354834);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.geom.GeometricUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Point point0 = new Point();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      double double0 = GeometricUtilities.distance((Rectangle2D) rectangle2D_Double0, (Point2D) point0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = GeometricUtilities.distance((-4420.037629613827), (-4420.037629613827), (-4420.037629613827), (-4420.037629613827));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Point point0 = new Point();
      Point2D.Double point2D_Double0 = (Point2D.Double)GeometricUtilities.project((Point2D) point0, (-1.6583898289867952E7), (-1.6583898289867952E7));
      assertEquals(1.2380220588454215E7, point2D_Double0.y, 0.01);
      assertEquals(1.1034302001934674E7, point2D_Double0.x, 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon May 24 13:10:48 GMT 2021
 */

package de.gurkenlabs.litiengine;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.gurkenlabs.litiengine.Align;
import de.gurkenlabs.litiengine.Direction;
import de.gurkenlabs.litiengine.GameRandom;
import de.gurkenlabs.litiengine.Valign;
import de.gurkenlabs.litiengine.entities.IEntity;
import de.gurkenlabs.litiengine.entities.MapArea;
import de.gurkenlabs.litiengine.entities.StaticShadow;
import de.gurkenlabs.litiengine.environment.tilemap.IMap;
import de.gurkenlabs.litiengine.graphics.RenderType;
import de.gurkenlabs.litiengine.graphics.StaticShadowType;
import java.awt.Color;
import java.awt.Rectangle;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.text.AttributedCharacterIterator;
import java.text.Format;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GameRandom_ESTest extends GameRandom_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Color color0 = Color.orange;
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(200, color0.getGreen());
      assertEquals((-14336), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertNotNull(color0);
      
      Color color1 = gameRandom0.nextColor(color0, 0.0F, 2970.93F);
      assertTrue(color1.equals((Object)color0));
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(200, color0.getGreen());
      assertEquals((-14336), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color1.getRed());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getBlue());
      assertEquals(1, color1.getTransparency());
      assertEquals((-14336), color1.getRGB());
      assertEquals(200, color1.getGreen());
      assertNotSame(color0, color1);
      assertNotSame(color1, color0);
      assertNotNull(color1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      char char0 = gameRandom0.nextChar();
      assertEquals('\u0000', char0);
      
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(954.4513381011849, (-850.137), 954.4513381011849, (-1105.6));
      assertEquals((-1955.7369999999999), ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals((-850.137), ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(954.4513381011849, ellipse2D_Double0.getMinX(), 0.01);
      assertEquals(1908.9026762023698, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(1431.6770071517774, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals((-1402.937), ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals((-850.137), ellipse2D_Double0.y, 0.01);
      assertEquals((-1105.6), ellipse2D_Double0.height, 0.01);
      assertEquals(954.4513381011849, ellipse2D_Double0.width, 0.01);
      assertEquals(954.4513381011849, ellipse2D_Double0.x, 0.01);
      assertNotNull(ellipse2D_Double0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)gameRandom0.getLocation((Ellipse2D) ellipse2D_Double0);
      assertEquals((-1955.7369999999999), ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals((-850.137), ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(954.4513381011849, ellipse2D_Double0.getMinX(), 0.01);
      assertEquals(1908.9026762023698, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(1431.6770071517774, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals((-1402.937), ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals((-850.137), ellipse2D_Double0.y, 0.01);
      assertEquals((-1105.6), ellipse2D_Double0.height, 0.01);
      assertEquals(954.4513381011849, ellipse2D_Double0.width, 0.01);
      assertEquals(954.4513381011849, ellipse2D_Double0.x, 0.01);
      assertEquals(1604.3388762446725, point2D_Double0.x, 0.01);
      assertEquals((-247.46514008852478), point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2692.694545);
      int int0 = gameRandom0.getIndex(doubleArray0);
      assertArrayEquals(new double[] {(-2692.694545), 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      boolean boolean0 = gameRandom0.probe(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      double double0 = gameRandom0.shuffleSign(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      long[] longArray0 = new long[8];
      gameRandom0.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 9;
      gameRandom0.shuffle(intArray0);
      assertArrayEquals(new int[] {9}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      int[] intArray0 = new int[3];
      gameRandom0.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Collection<Object> collection0 = gameRandom0.sample((Collection<Object>) vector0, 0, false);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(0));
      assertFalse(collection0.contains(0));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Stack<Align> stack0 = new Stack<Align>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(defaultTableModel0);
      
      JTable jTable0 = new JTable(defaultTableModel0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNotNull(jTable0);
      
      Rectangle rectangle0 = jTable0.getCellRect((-1), (-2146412386), false);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)gameRandom0.getLocation((Rectangle2D) rectangle0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      long long0 = gameRandom0.shuffleSign((long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      long long0 = gameRandom0.shuffleSign((-1L));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      int int0 = gameRandom0.shuffleSign(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      int int0 = gameRandom0.shuffleSign(2141);
      assertEquals((-2141), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      float float0 = gameRandom0.shuffleSign((float) 0);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      float float0 = gameRandom0.shuffleSign((-49.347214F));
      assertEquals(49.347214F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      float float0 = gameRandom0.shuffleSign(2820.08F);
      assertEquals((-2820.08F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      double double0 = gameRandom0.shuffleSign((-1.0));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      double double0 = gameRandom0.shuffleSign(3405.683379322581);
      assertEquals((-3405.683379322581), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Align[] alignArray0 = new Align[4];
      Align[] alignArray1 = gameRandom0.sample(alignArray0, 0, false);
      assertFalse(alignArray1.equals((Object)alignArray0));
      assertEquals(4, alignArray0.length);
      assertEquals(0, alignArray1.length);
      assertNotSame(alignArray0, alignArray1);
      assertNotSame(alignArray1, alignArray0);
      assertNotNull(alignArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      long long0 = gameRandom0.nextLong(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      long long0 = gameRandom0.nextLong((-2225L), (long) 1469);
      assertEquals((-2225L), long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      int int0 = gameRandom0.nextInt();
      assertEquals(0, int0);
      
      long long0 = gameRandom0.nextLong((long) 255);
      assertEquals(255L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      int int0 = gameRandom0.nextInt(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      int int0 = gameRandom0.nextInt(242, 242);
      assertEquals(242, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      float float0 = gameRandom0.nextFloat((-1890.0F), 2820.08F);
      assertEquals((-1890.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      float float0 = gameRandom0.nextFloat((float) 1606);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      char char0 = gameRandom0.nextChar();
      assertEquals('\u0000', char0);
      
      float float0 = gameRandom0.nextFloat(2387.2021F);
      assertEquals(238.72021F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      double double0 = gameRandom0.nextDouble(0.0, (double) (short)72);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      double double0 = gameRandom0.nextDouble(166.8);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Color color0 = Color.orange;
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(200, color0.getGreen());
      assertEquals((-14336), color0.getRGB());
      assertNotNull(color0);
      
      Color color1 = gameRandom0.nextColor(color0, 2977.69F, 2977.69F);
      assertFalse(color1.equals((Object)color0));
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(200, color0.getGreen());
      assertEquals((-14336), color0.getRGB());
      assertEquals(0, color1.getGreen());
      assertEquals(2, color1.getTransparency());
      assertEquals(0, color1.getAlpha());
      assertEquals(16711680, color1.getRGB());
      assertEquals(0, color1.getBlue());
      assertEquals(255, color1.getRed());
      assertNotSame(color0, color1);
      assertNotSame(color1, color0);
      assertNotNull(color1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Color color0 = Color.darkGray;
      assertEquals((-12566464), color0.getRGB());
      assertEquals(64, color0.getBlue());
      assertEquals(64, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(64, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      Color color1 = gameRandom0.nextColor(color0, 0.0F, 0.0F);
      assertTrue(color1.equals((Object)color0));
      assertEquals((-12566464), color0.getRGB());
      assertEquals(64, color0.getBlue());
      assertEquals(64, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(64, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(64, color1.getRed());
      assertEquals(64, color1.getGreen());
      assertEquals((-12566464), color1.getRGB());
      assertEquals(64, color1.getBlue());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertNotSame(color0, color1);
      assertNotSame(color1, color0);
      assertNotNull(color1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Color color0 = Color.BLACK;
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      Color color1 = gameRandom0.nextColor(color0, 4241.747F, 0.0F);
      assertTrue(color1.equals((Object)color0));
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertNotSame(color0, color1);
      assertNotSame(color1, color0);
      assertNotNull(color1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      char char0 = gameRandom0.nextChar("{G");
      assertEquals('{', char0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      int int0 = gameRandom0.nextInt();
      assertEquals(0, int0);
      
      char char0 = gameRandom0.nextChar(">3GNYBaiMCQY}yE$aAA");
      assertEquals('3', char0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      char char0 = gameRandom0.nextAscii();
      assertEquals(' ', char0);
      
      char char1 = gameRandom0.nextChar();
      assertFalse(char1 == char0);
      assertEquals('\u1999', char1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      String string0 = gameRandom0.nextAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      double double0 = gameRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)gameRandom0.getLocation((-303.5773205928156), (-2495.29), 0.0, 41.04578184961);
      assertEquals((-2491.185421815039), point2D_Double0.y, 0.01);
      assertEquals((-303.5773205928156), point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Point2D.Double point2D_Double1 = (Point2D.Double)gameRandom0.getLocation(0.0, 1883.4841, 2785.13, 2014.3448);
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals(2487.78754, point2D_Double1.y, 0.01);
      assertEquals(557.0260000000001, point2D_Double1.x, 0.01);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertNotNull(point2D_Double1);
      
      char char0 = gameRandom0.nextAscii();
      assertEquals('F', char0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      String string0 = gameRandom0.nextAlphanumeric(75, true, false);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      String string0 = gameRandom0.nextAlphanumeric(3182, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      String string0 = gameRandom0.nextAlphanumeric(0, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      String string0 = gameRandom0.nextAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      String string0 = gameRandom0.nextAlphabetic(219, false);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      String string0 = gameRandom0.nextAlphabetic(0, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      String string0 = gameRandom0.nextAlphabetic(5283);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      String string0 = gameRandom0.nextAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 3709.828711701733;
      int int0 = gameRandom0.getIndex(doubleArray0);
      assertArrayEquals(new double[] {0.0, 3709.828711701733}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "9:~LqT|uL}eu#`cMi(";
      String string0 = gameRandom0.choose(stringArray0);
      assertEquals("9:~LqT|uL}eu#`cMi(", string0);
      assertEquals(6, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      float float0 = gameRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = gameRandom0.nextDouble(1453.3911225);
      assertEquals(145.33911225, double0, 0.01);
      
      String[] stringArray0 = new String[3];
      StaticShadowType staticShadowType0 = StaticShadowType.LEFTDOWN;
      StaticShadow staticShadow0 = new StaticShadow(1L, 1453.3911225, 2.0F, (-1.0F), staticShadowType0);
      assertEquals(10, staticShadow0.getOffset());
      assertEquals(1453.3911225, staticShadow0.getY(), 0.01);
      assertNull(staticShadow0.getName());
      assertEquals(0.0, staticShadow0.getAngle(), 0.01);
      assertEquals((-1.0), staticShadow0.getHeight(), 0.01);
      assertEquals(1.0, staticShadow0.getX(), 0.01);
      assertEquals(2.0, staticShadow0.getWidth(), 0.01);
      assertEquals(StaticShadowType.LEFTDOWN, staticShadow0.getShadowType());
      assertEquals(RenderType.OVERLAY, staticShadow0.getRenderType());
      assertEquals(0, staticShadow0.getMapId());
      assertFalse(staticShadow0.isLoaded());
      assertFalse(staticShadow0.renderWithLayer());
      assertEquals(10, StaticShadow.DEFAULT_OFFSET);
      assertNotNull(staticShadow0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)gameRandom0.getLocation((IEntity) staticShadow0);
      assertEquals(10, staticShadow0.getOffset());
      assertEquals(1453.3911225, staticShadow0.getY(), 0.01);
      assertNull(staticShadow0.getName());
      assertEquals(0.0, staticShadow0.getAngle(), 0.01);
      assertEquals((-1.0), staticShadow0.getHeight(), 0.01);
      assertEquals(1.0, staticShadow0.getX(), 0.01);
      assertEquals(2.0, staticShadow0.getWidth(), 0.01);
      assertEquals(StaticShadowType.LEFTDOWN, staticShadow0.getShadowType());
      assertEquals(RenderType.OVERLAY, staticShadow0.getRenderType());
      assertEquals(0, staticShadow0.getMapId());
      assertFalse(staticShadow0.isLoaded());
      assertFalse(staticShadow0.renderWithLayer());
      assertEquals(10, StaticShadow.DEFAULT_OFFSET);
      assertEquals((-2.5999999999999996), point2D_Double0.x, 0.01);
      assertEquals(1455.3911225, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      stringArray0[1] = "";
      String string0 = gameRandom0.choose(stringArray0);
      assertEquals("", string0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) gameRandom0;
      Object object0 = gameRandom0.choose(objectArray0);
      assertEquals(3, objectArray0.length);
      assertSame(gameRandom0, object0);
      assertSame(object0, gameRandom0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1668L;
      long long0 = gameRandom0.choose(longArray0);
      assertArrayEquals(new long[] {1668L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(1668L, long0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1096L);
      long long0 = gameRandom0.choose(longArray0);
      assertArrayEquals(new long[] {(-1096L), 0L}, longArray0);
      assertEquals((-1096L), long0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      String string0 = gameRandom0.nextAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = gameRandom0.probe(1.0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[2] = 1;
      int int0 = gameRandom0.choose(intArray0);
      assertArrayEquals(new int[] {0, 0, 1, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, int0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1721);
      int int0 = gameRandom0.choose(intArray0);
      assertArrayEquals(new int[] {(-1721), 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1721), int0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      String string0 = gameRandom0.nextAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1;
      double double0 = gameRandom0.choose(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.shuffle((Valign[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.shuffle((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.shuffle((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.setSeed((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      AttributedCharacterIterator.Attribute[] attributedCharacterIterator_AttributeArray0 = new AttributedCharacterIterator.Attribute[0];
      // Undeclared exception!
      gameRandom0.sample(attributedCharacterIterator_AttributeArray0, 536870912, true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.sample((Align[]) null, 610, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Align[] alignArray0 = new Align[0];
      // Undeclared exception!
      try { 
        gameRandom0.sample(alignArray0, (-2115903006), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      LinkedHashSet<Direction> linkedHashSet0 = new LinkedHashSet<Direction>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      gameRandom0.sample((Collection<Direction>) linkedHashSet0, 65535, true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      gameRandom0.sample((Collection<Integer>) null, 536870912, true);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.sample((Collection<DefaultTableModel>) null, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.nextChar((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.nextChar("");
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      gameRandom0.nextAscii(65563);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      gameRandom0.nextAscii(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.nextAscii((-982));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      gameRandom0.nextAlphanumeric(2147145674, true, true);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      gameRandom0.nextAlphanumeric(65535, true);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      gameRandom0.nextAlphanumeric(536870911, true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      gameRandom0.nextAlphanumeric(65535);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      gameRandom0.nextAlphanumeric(536870912);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.nextAlphanumeric((-2736));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      gameRandom0.nextAlphabetic(65535, true);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.nextAlphabetic((-1599), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      gameRandom0.nextAlphabetic(65535);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.nextAlphabetic((-1707));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.getLocation((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.getLocation((Point2D) null, (Point2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.getLocation((Line2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.getLocation((Ellipse2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      MapArea mapArea0 = new MapArea((-1L), (-1840.019), (-4.0), 0.0);
      assertEquals((-1840.019), mapArea0.getY(), 0.01);
      assertFalse(mapArea0.renderWithLayer());
      assertEquals((-1.0), mapArea0.getX(), 0.01);
      assertEquals(0.0, mapArea0.getHeight(), 0.01);
      assertEquals(0.0, mapArea0.getAngle(), 0.01);
      assertFalse(mapArea0.isLoaded());
      assertEquals((-4.0), mapArea0.getWidth(), 0.01);
      assertEquals(0, mapArea0.getMapId());
      assertNull(mapArea0.getName());
      assertEquals(RenderType.NONE, mapArea0.getRenderType());
      assertNotNull(mapArea0);
      
      // Undeclared exception!
      try { 
        gameRandom0.getLocation((IEntity) mapArea0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min value is > than max value
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.getLocation((-1195.0490282045), (-1195.0490282045), (-1195.0490282045), (-1195.0490282045));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min value is > than max value
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.getIndex((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      gameRandom0.nextAlphanumeric(65535, true, true);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.nextAlphanumeric((-477), false, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      String string0 = gameRandom0.nextAlphanumeric(0, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      float float0 = gameRandom0.nextFloat(0.0F, 2415.39F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.nextFloat((-1312.9F), (-3916.675F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min value is > than max value
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      double double0 = gameRandom0.nextDouble((-3376.9023), (-2692.694545));
      assertEquals((-3376.9023), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.nextDouble((double) 242, (-2165.9283));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min value is > than max value
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      double double0 = gameRandom0.nextDouble(16.302915759206968, 16.302915759206968);
      assertEquals(16.302915759206968, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      long long0 = gameRandom0.nextLong(1L, 3208L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.nextLong((long) 0, (-2547L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min value is > than max value
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      int int0 = gameRandom0.nextSign();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Valign[] valignArray0 = new Valign[1];
      gameRandom0.shuffle(valignArray0);
      assertEquals(1, valignArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      JTableHeader jTableHeader0 = new JTableHeader();
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      assertNotNull(jTableHeader0);
      
      boolean boolean0 = priorityQueue0.add(jTableHeader0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      assertTrue(boolean0);
      
      JTableHeader jTableHeader1 = (JTableHeader)gameRandom0.choose((Collection<Object>) priorityQueue0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(jTableHeader1.getFocusTraversalKeysEnabled());
      assertFalse(jTableHeader1.isFocusTraversalPolicySet());
      assertFalse(jTableHeader1.getIgnoreRepaint());
      assertFalse(jTableHeader1.isFocusCycleRoot());
      assertFalse(jTableHeader1.isFocusTraversalPolicyProvider());
      assertSame(jTableHeader1, jTableHeader0);
      assertNotNull(jTableHeader1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      
      Integer integer0 = gameRandom0.choose((Collection<Integer>) treeSet0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Align[] alignArray0 = new Align[2];
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      gameRandom0.choose(alignArray0);
      assertEquals(2, alignArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      BufferedInputStream[] bufferedInputStreamArray0 = new BufferedInputStream[0];
      BufferedInputStream bufferedInputStream0 = gameRandom0.choose(bufferedInputStreamArray0);
      assertEquals(0, bufferedInputStreamArray0.length);
      assertNull(bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.nextFloat((-1923.5814F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min value is > than max value
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      char char0 = gameRandom0.nextAscii();
      assertEquals(' ', char0);
      
      double double0 = gameRandom0.nextDouble((double) ' ');
      assertEquals(3.2, double0, 0.01);
      
      char char1 = gameRandom0.nextAscii();
      assertFalse(char1 == char0);
      assertEquals('3', char1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.nextDouble((-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min value is > than max value
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      ArrayList<DefaultTableModel> arrayList0 = new ArrayList<DefaultTableModel>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      gameRandom0.shuffle((List<DefaultTableModel>) arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      char char0 = gameRandom0.nextChar("array to chose an element from must not be null or empty.");
      assertEquals('a', char0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.nextAlphanumeric((-1), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Color color0 = gameRandom0.nextColor((Color) null, 442.4F, 442.4F);
      assertNull(color0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      int int0 = gameRandom0.getIndex(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      boolean boolean0 = gameRandom0.probe((-194.14789076));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      int int0 = gameRandom0.nextInt((-2791), 763);
      assertEquals((-2791), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.nextInt(2073, 2048);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min value is > than max value
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Color color0 = Color.MAGENTA;
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-65281), color0.getRGB());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertNotNull(color0);
      
      // Undeclared exception!
      try { 
        gameRandom0.nextColor(color0, Float.NaN, (-0.1F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min value is > than max value
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      float float0 = gameRandom0.nextFloat(2852.0059F, 2852.0059F);
      assertEquals(2852.0059F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      long long0 = gameRandom0.nextLong(723L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      double[] doubleArray0 = new double[8];
      gameRandom0.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      PriorityQueue<AttributedCharacterIterator.Attribute> priorityQueue0 = new PriorityQueue<AttributedCharacterIterator.Attribute>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      assertNotNull(attributedCharacterIterator_Attribute0);
      
      boolean boolean0 = priorityQueue0.add(attributedCharacterIterator_Attribute0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains(attributedCharacterIterator_Attribute0));
      
      Collection<AttributedCharacterIterator.Attribute> collection0 = gameRandom0.sample((Collection<AttributedCharacterIterator.Attribute>) priorityQueue0, 222, true);
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(attributedCharacterIterator_Attribute0));
      assertTrue(collection0.contains(attributedCharacterIterator_Attribute0));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = gameRandom0.choose((Collection<AttributedCharacterIterator.Attribute>) null);
      assertNull(attributedCharacterIterator_Attribute0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      String[] stringArray0 = new String[1];
      String string0 = gameRandom0.choose(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        gameRandom0.choose(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array to chose an element from must not be null or empty.
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.choose((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array to chose an element from must not be null or empty.
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        gameRandom0.choose(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array to chose an element from must not be null or empty.
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      double[] doubleArray0 = new double[8];
      double double0 = gameRandom0.choose(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.choose((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array to chose an element from must not be null or empty.
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      long[] longArray0 = new long[1];
      long long0 = gameRandom0.choose(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(0L, long0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        gameRandom0.choose(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array to chose an element from must not be null or empty.
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.choose((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array to chose an element from must not be null or empty.
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        gameRandom0.choose(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array to chose an element from must not be null or empty.
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      int[] intArray0 = new int[1];
      int int0 = gameRandom0.choose(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      // Undeclared exception!
      try { 
        gameRandom0.choose((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array to chose an element from must not be null or empty.
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      InputStream inputStream0 = gameRandom0.choose((InputStream[]) null);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Stack<Format.Field> stack0 = new Stack<Format.Field>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        gameRandom0.sample((Collection<Format.Field>) stack0, 9, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // amount must be <= the specified array length for sampling without replacement.
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Align[] alignArray0 = new Align[0];
      Align[] alignArray1 = gameRandom0.sample(alignArray0, 483, true);
      assertFalse(alignArray1.equals((Object)alignArray0));
      assertEquals(0, alignArray0.length);
      assertEquals(483, alignArray1.length);
      assertNotSame(alignArray0, alignArray1);
      assertNotSame(alignArray1, alignArray0);
      assertNotNull(alignArray1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Align[] alignArray0 = new Align[0];
      // Undeclared exception!
      try { 
        gameRandom0.sample(alignArray0, 1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // amount must be <= the specified array length for sampling without replacement.
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Align[] alignArray0 = new Align[1];
      Align[] alignArray1 = gameRandom0.sample(alignArray0, 1, false);
      assertFalse(alignArray1.equals((Object)alignArray0));
      assertEquals(1, alignArray0.length);
      assertEquals(1, alignArray1.length);
      assertNotSame(alignArray0, alignArray1);
      assertNotSame(alignArray1, alignArray0);
      assertNotNull(alignArray1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Direction[] directionArray0 = new Direction[1];
      // Undeclared exception!
      gameRandom0.sample(directionArray0, 65535, true);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      StringContent stringContent0 = new StringContent();
      assertNotNull(stringContent0);
      
      StyleContext styleContext0 = new StyleContext();
      assertNotNull(styleContext0);
      
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      assertNotNull(defaultStyledDocument0);
      
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      assertNotNull(simpleAttributeSet0);
      
      Color color0 = defaultStyledDocument0.getBackground(simpleAttributeSet0);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertNotNull(color0);
      
      Color color1 = gameRandom0.nextColor(color0, 1546.0F, Float.NaN);
      assertFalse(color1.equals((Object)color0));
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(2, color1.getTransparency());
      assertEquals(0, color1.getAlpha());
      assertEquals(0, color1.getRGB());
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getBlue());
      assertEquals(0, color1.getRed());
      assertNotSame(color0, color1);
      assertNotSame(color1, color0);
      assertNotNull(color1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      assertNotNull(gameRandom0);
      
      Class<Direction> class0 = Direction.class;
      Direction direction0 = gameRandom0.next(class0);
      assertEquals(360.0F, direction0.toAngle(), 0.01F);
      assertEquals((byte)1, direction0.toFlagValue());
      assertEquals(Direction.DOWN, direction0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      // Undeclared exception!
      gameRandom0.nextAlphabetic(2147110885, true);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(360.0, 360.0, 0.4, 0.4);
      Point2D.Double point2D_Double0 = (Point2D.Double)gameRandom0.getLocation((Ellipse2D) ellipse2D_Double0);
      assertEquals(360.2, point2D_Double0.y, 0.01);
      assertEquals(360.2632455532034, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      gameRandom0.nextChar();
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (-783);
      double double0 = gameRandom0.choose(doubleArray0);
      assertEquals((-783.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      // Undeclared exception!
      try { 
        gameRandom0.nextLong((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min value is > than max value
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      gameRandom0.setSeed(":*``H1H3>f?");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Point2D point2D0 = gameRandom0.getLocation((Line2D) line2D_Float0);
      Point2D point2D1 = gameRandom0.getLocation(point2D0, point2D0);
      assertFalse(point2D1.equals((Object)point2D0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      int int0 = gameRandom0.shuffleSign((-61));
      assertEquals(61, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      String string0 = gameRandom0.nextAlphanumeric(652);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      long long0 = gameRandom0.shuffleSign(1597L);
      assertEquals((-1597L), long0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      ArrayList<AttributedCharacterIterator.Attribute> arrayList0 = new ArrayList<AttributedCharacterIterator.Attribute>();
      // Undeclared exception!
      try { 
        gameRandom0.sample((Collection<AttributedCharacterIterator.Attribute>) arrayList0, (-1070), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1070
         //
         verifyException("java.util.stream.ReferencePipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      double double0 = gameRandom0.shuffleSign(0.0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      // Undeclared exception!
      try { 
        gameRandom0.getLocation((IMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((-1172L), (-1172L), (-1172L), (-635.1205087318683));
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getFrame();
      // Undeclared exception!
      try { 
        gameRandom0.getLocation(rectangle2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min value is > than max value
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      float float0 = gameRandom0.shuffleSign(Float.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      // Undeclared exception!
      try { 
        gameRandom0.getLocation((IEntity) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.GameRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      GameRandom gameRandom0 = new GameRandom();
      // Undeclared exception!
      gameRandom0.nextAlphabetic(805306368);
  }
}

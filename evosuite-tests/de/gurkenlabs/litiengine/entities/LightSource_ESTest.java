/*
 * This file was automatically generated by EvoSuite
 * Wed May 26 16:29:53 GMT 2021
 */

package de.gurkenlabs.litiengine.entities;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.gurkenlabs.litiengine.entities.LightSource;
import de.gurkenlabs.litiengine.entities.StaticShadow;
import de.gurkenlabs.litiengine.environment.Environment;
import de.gurkenlabs.litiengine.graphics.AmbientLight;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.SystemColor;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import javax.swing.JColorChooser;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LightSource_ESTest extends LightSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.menuText;
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource(6754, systemColor0, lightSource_Type0, true);
      JColorChooser jColorChooser0 = new JColorChooser();
      MouseEvent mouseEvent0 = new MouseEvent(jColorChooser0, 100, (-1L), 6754, 6754, 1720, (-3176), true);
      Point point0 = mouseEvent0.getLocationOnScreen();
      lightSource0.setLocation((Point2D) point0);
      assertEquals(6754, lightSource0.getIntensity());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource(2429, (Color) null, lightSource_Type0, false);
      boolean boolean0 = lightSource0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource((-207), color0, lightSource_Type0, true);
      lightSource0.setSize((-207), (-207));
      int int0 = lightSource0.getRadius();
      assertEquals((-103), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Color color0 = Color.green;
      LightSource lightSource0 = new LightSource((-17), color0, (LightSource.Type) null, true);
      lightSource0.getLightShapeType();
      assertEquals((-17), lightSource0.getIntensity());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource((-184), color0, lightSource_Type0, true);
      lightSource0.setHeight((-184));
      lightSource0.getLightShape();
      assertEquals((-184.0), lightSource0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource((-184), color0, lightSource_Type0, true);
      int int0 = lightSource0.getIntensity();
      assertEquals((-184), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource((-1801069293), color0, lightSource_Type0, false);
      lightSource0.setFocusOffsetY(1.0);
      double double0 = lightSource0.getFocusOffsetY();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource((-184), color0, lightSource_Type0, true);
      lightSource0.setFocusOffsetX(1.0);
      double double0 = lightSource0.getFocusOffsetX();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource((-3469), (Color) null, lightSource_Type0, true);
      lightSource0.getColor();
      assertEquals((-3469), lightSource0.getIntensity());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Color color0 = StaticShadow.DEFAULT_COLOR;
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource((-2031), color0, lightSource_Type0, false);
      lightSource0.getColor();
      assertFalse(lightSource0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Color color0 = Color.lightGray;
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource(0, color0, lightSource_Type0, false);
      lightSource0.getColor();
      assertFalse(lightSource0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Color color0 = AmbientLight.DEFAULT_COLOR;
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource(1506, color0, lightSource_Type0, true);
      lightSource0.getColor();
      assertEquals(1506, lightSource0.getIntensity());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource(1073741824, (Color) null, lightSource_Type0, false);
      lightSource0.loaded((Environment) null);
      // Undeclared exception!
      try { 
        lightSource0.toggle();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class de.gurkenlabs.litiengine.Game
         //
         verifyException("de.gurkenlabs.litiengine.entities.LightSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource(0, (Color) null, lightSource_Type0, false);
      lightSource0.loaded((Environment) null);
      // Undeclared exception!
      try { 
        lightSource0.setY(208.24002);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class de.gurkenlabs.litiengine.Game
         //
         verifyException("de.gurkenlabs.litiengine.entities.LightSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource(1752, (Color) null, lightSource_Type0, true);
      lightSource0.loaded((Environment) null);
      // Undeclared exception!
      try { 
        lightSource0.setWidth(1752);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class de.gurkenlabs.litiengine.Game
         //
         verifyException("de.gurkenlabs.litiengine.entities.LightSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource(4478, (Color) null, lightSource_Type0, true);
      lightSource0.loaded((Environment) null);
      // Undeclared exception!
      try { 
        lightSource0.setIntensity(4478);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class de.gurkenlabs.litiengine.Game
         //
         verifyException("de.gurkenlabs.litiengine.entities.LightSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource(1073741824, (Color) null, lightSource_Type0, false);
      lightSource0.loaded((Environment) null);
      // Undeclared exception!
      try { 
        lightSource0.setHeight(1073741824);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class de.gurkenlabs.litiengine.Game
         //
         verifyException("de.gurkenlabs.litiengine.entities.LightSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Color color0 = Color.red;
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource(0, color0, lightSource_Type0, false);
      lightSource0.loaded((Environment) null);
      // Undeclared exception!
      try { 
        lightSource0.setColor(color0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class de.gurkenlabs.litiengine.Game
         //
         verifyException("de.gurkenlabs.litiengine.entities.LightSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource(984, (Color) null, lightSource_Type0, true);
      // Undeclared exception!
      try { 
        lightSource0.render((Graphics2D) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class de.gurkenlabs.litiengine.Game
         //
         verifyException("de.gurkenlabs.litiengine.entities.LightSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Color color0 = Color.green;
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource((-2109203420), color0, lightSource_Type0, false);
      lightSource0.loaded((Environment) null);
      // Undeclared exception!
      try { 
        lightSource0.activate();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class de.gurkenlabs.litiengine.Game
         //
         verifyException("de.gurkenlabs.litiengine.entities.LightSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      Color color0 = new Color(2502);
      LightSource lightSource0 = new LightSource(2502, color0, lightSource_Type0, false);
      lightSource0.toggle();
      assertTrue(lightSource0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Color color0 = new Color(2502);
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource((-58), color0, lightSource_Type0, true);
      lightSource0.toggle();
      assertFalse(lightSource0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Color color0 = Color.YELLOW;
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource((-2093929146), color0, lightSource_Type0, false);
      // Undeclared exception!
      try { 
        lightSource0.setLocation((Point2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.entities.Entity", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource((-1176782923), (Color) null, lightSource_Type0, true);
      lightSource0.getLightShapeType();
      assertEquals((-1176782923), lightSource0.getIntensity());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Color color0 = Color.lightGray;
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource(0, color0, lightSource_Type0, false);
      lightSource0.loaded((Environment) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        lightSource0.sendMessage(object0, "toggle");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class de.gurkenlabs.litiengine.Game
         //
         verifyException("de.gurkenlabs.litiengine.entities.LightSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource(1073741824, (Color) null, lightSource_Type0, false);
      lightSource0.sendMessage((Object) null, "*tSQ%9j(5WIezDsiS\u0005");
      assertEquals(0, lightSource0.getIntensity());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource((-1725767738), (Color) null, lightSource_Type0, false);
      lightSource0.sendMessage(lightSource_Type0, "");
      assertEquals(0, lightSource0.getIntensity());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource(1122, systemColor0, lightSource_Type0, false);
      lightSource0.sendMessage(lightSource0.DEFAULT_INTENSITY, (String) null);
      assertFalse(lightSource0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource((-13), (Color) null, lightSource_Type0, false);
      lightSource0.sendMessage("toggle", "toggle");
      assertEquals((-13), lightSource0.getIntensity());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource(1324, (Color) null, lightSource_Type0, true);
      int int0 = lightSource0.getIntensity();
      assertEquals(1324, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource(2429, (Color) null, lightSource_Type0, false);
      int int0 = lightSource0.getIntensity();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource((-1850272465), (Color) null, lightSource_Type0, false);
      lightSource0.deactivate();
      assertEquals(32.0, lightSource0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource((-1732485003), (Color) null, lightSource_Type0, true);
      assertTrue(lightSource0.isActive());
      
      lightSource0.deactivate();
      assertFalse(lightSource0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource((-4206), (Color) null, lightSource_Type0, true);
      lightSource0.activate();
      assertEquals((-4206), lightSource0.getIntensity());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource(1073741824, (Color) null, lightSource_Type0, false);
      assertEquals(0, lightSource0.getIntensity());
      
      lightSource0.activate();
      assertTrue(lightSource0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Color color0 = Color.lightGray;
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource(78, color0, lightSource_Type0, false);
      int int0 = lightSource0.getRadius();
      assertEquals(0, int0);
      assertEquals(0, lightSource0.getIntensity());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource(0, (Color) null, lightSource_Type0, false);
      lightSource0.getLightShape();
      assertFalse(lightSource0.isActive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource(1073741824, (Color) null, lightSource_Type0, false);
      double double0 = lightSource0.getFocusOffsetX();
      assertEquals(0.0, double0, 0.01);
      assertFalse(lightSource0.isActive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource((-6), (Color) null, lightSource_Type0, false);
      double double0 = lightSource0.getFocusOffsetY();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, lightSource0.getIntensity());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource((-6), (Color) null, lightSource_Type0, false);
      lightSource0.setFocusOffsetY((-6));
      double double0 = lightSource0.getFocusOffsetY();
      assertEquals((-6.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Color color0 = Color.magenta;
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource((-3360), color0, lightSource_Type0, false);
      lightSource0.setY((-3360));
      assertEquals((-3360.0), lightSource0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource(1, (Color) null, lightSource_Type0, false);
      lightSource0.setLightShapeType(lightSource_Type0);
      assertFalse(lightSource0.isActive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.RECTANGLE;
      LightSource lightSource0 = new LightSource(1324, (Color) null, lightSource_Type0, true);
      boolean boolean0 = lightSource0.isActive();
      assertEquals(1324, lightSource0.getIntensity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      SystemColor systemColor0 = SystemColor.textHighlightText;
      LightSource lightSource0 = new LightSource(2147483641, systemColor0, lightSource_Type0, false);
      lightSource0.setWidth(1892.71287068);
      assertEquals(1892.71287068, lightSource0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource(739, (Color) null, lightSource_Type0, false);
      lightSource0.setColor((Color) null);
      assertFalse(lightSource0.isActive());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource((-1725767738), (Color) null, lightSource_Type0, false);
      lightSource0.setIntensity((-1725767738));
      assertEquals(0, lightSource0.getIntensity());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource((-1176782923), (Color) null, lightSource_Type0, true);
      lightSource0.setX((-406.9866969263055));
      assertEquals((-406.9866969263055), lightSource0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource(1073741824, (Color) null, lightSource_Type0, false);
      lightSource0.setFocusOffsetX((-1770.9));
      double double0 = lightSource0.getFocusOffsetX();
      assertEquals((-1770.9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Color color0 = new Color(2502);
      LightSource.Type lightSource_Type0 = LightSource.Type.ELLIPSE;
      LightSource lightSource0 = new LightSource((-58), color0, lightSource_Type0, true);
      lightSource0.setSize(2502, 0.0);
      assertEquals(0.0, lightSource0.getHeight(), 0.01);
  }
}

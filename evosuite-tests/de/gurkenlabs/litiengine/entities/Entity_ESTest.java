/*
 * This file was automatically generated by EvoSuite
 * Wed May 26 16:08:32 GMT 2021
 */

package de.gurkenlabs.litiengine.entities;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.gurkenlabs.litiengine.Direction;
import de.gurkenlabs.litiengine.entities.CollisionBox;
import de.gurkenlabs.litiengine.entities.CombatEntity;
import de.gurkenlabs.litiengine.entities.Creature;
import de.gurkenlabs.litiengine.entities.EntityAction;
import de.gurkenlabs.litiengine.entities.EntityListener;
import de.gurkenlabs.litiengine.entities.EntityMessageListener;
import de.gurkenlabs.litiengine.entities.EntityRenderEvent;
import de.gurkenlabs.litiengine.entities.EntityRenderListener;
import de.gurkenlabs.litiengine.entities.EntityRenderedListener;
import de.gurkenlabs.litiengine.entities.EntityTransformListener;
import de.gurkenlabs.litiengine.entities.IEntity;
import de.gurkenlabs.litiengine.entities.IEntityController;
import de.gurkenlabs.litiengine.entities.MapArea;
import de.gurkenlabs.litiengine.entities.SoundSource;
import de.gurkenlabs.litiengine.entities.Spawnpoint;
import de.gurkenlabs.litiengine.entities.StaticShadow;
import de.gurkenlabs.litiengine.entities.Trigger;
import de.gurkenlabs.litiengine.environment.Environment;
import de.gurkenlabs.litiengine.graphics.RenderType;
import de.gurkenlabs.litiengine.graphics.StaticShadowType;
import de.gurkenlabs.litiengine.tweening.TweenType;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Point;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Entity_ESTest extends Entity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      TweenType tweenType0 = TweenType.POSITION_XY;
      float[] floatArray0 = spawnpoint0.getTweenValues(tweenType0);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Direction direction0 = Direction.RIGHT;
      Spawnpoint spawnpoint0 = new Spawnpoint(10, (-1639.1191), 10, direction0);
      spawnpoint0.setY(135.0);
      assertEquals(135.0, spawnpoint0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Direction direction0 = Direction.UNDEFINED;
      Spawnpoint spawnpoint0 = new Spawnpoint((Point2D) null, direction0);
      EntityTransformListener entityTransformListener0 = mock(EntityTransformListener.class, new ViolatedAssumptionAnswer());
      spawnpoint0.addTransformListener(entityTransformListener0);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0, spawnpoint0.getMapId());
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.setX(0.0);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint((-1646), (-1075), 1.7976931348623157E308);
      spawnpoint0.setSize((-1075), 1.7976931348623157E308);
      assertEquals(1.7976931348623157E308, spawnpoint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint((-1075), (-678.844437), 1927.3806899207366);
      spawnpoint0.setName("de.gurkenlabs.litiengine.entities.Entity");
      assertEquals("de.gurkenlabs.litiengine.entities.Entity", spawnpoint0.getName());
      assertEquals((-1075), spawnpoint0.getMapId());
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.setMapId((-16));
      assertEquals((-16), spawnpoint0.getMapId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Direction direction0 = Direction.UNDEFINED;
      Spawnpoint spawnpoint0 = new Spawnpoint(direction0);
      spawnpoint0.setLocation((Point2D) null);
      assertEquals(32.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint(7, 7, (-747.0399676));
      spawnpoint0.setLocation((-452.685087), (-452.685087));
      assertEquals((-452.685087), spawnpoint0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Direction direction0 = Direction.LEFT;
      Spawnpoint spawnpoint0 = new Spawnpoint(direction0);
      spawnpoint0.setHeight((-2207.145059));
      assertEquals((-2207.145059), spawnpoint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CombatEntity combatEntity0 = new CombatEntity();
      Point2D.Double point2D_Double0 = (Point2D.Double)combatEntity0.getLocation();
      assertEquals(32.0, combatEntity0.getHeight(), 0.01);
      assertEquals(32.0, combatEntity0.getWidth(), 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Trigger.TriggerActivation trigger_TriggerActivation0 = Trigger.TriggerActivation.COLLISION;
      Trigger trigger0 = new Trigger(trigger_TriggerActivation0, ")mdO", "Entity \"{0}\" could not perform the action \"{1}\". \nMaybe you need to register the action or provide an appropriate Action annotation on the method you want to call.", false);
      TweenType tweenType0 = TweenType.SIZE_BOTH;
      float[] floatArray0 = trigger0.getTweenValues(tweenType0);
      Direction direction0 = Direction.LEFT;
      Spawnpoint spawnpoint0 = new Spawnpoint(1451.134, 744.27, direction0);
      spawnpoint0.setTweenValues(tweenType0, floatArray0);
      assertEquals(32.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Direction direction0 = Direction.UNDEFINED;
      Spawnpoint spawnpoint0 = new Spawnpoint(direction0);
      TweenType tweenType0 = TweenType.SIZE_HEIGHT;
      float[] floatArray0 = new float[6];
      spawnpoint0.setTweenValues(tweenType0, floatArray0);
      assertEquals(0.0, spawnpoint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint(10, 10);
      TweenType tweenType0 = TweenType.SIZE_WIDTH;
      float[] floatArray0 = new float[5];
      spawnpoint0.setTweenValues(tweenType0, floatArray0);
      assertEquals(0.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location(29, 29);
      Spawnpoint spawnpoint0 = new Spawnpoint(10, point0);
      TweenType tweenType0 = TweenType.POSITION_Y;
      float[] floatArray0 = new float[2];
      spawnpoint0.setTweenValues(tweenType0, floatArray0);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(10, spawnpoint0.getMapId());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Trigger.TriggerActivation trigger_TriggerActivation0 = Trigger.TriggerActivation.COLLISION;
      Trigger trigger0 = new Trigger(trigger_TriggerActivation0, ")mdO", "Entity \"{0}\" could not perform the acgion \"{1}\". \nMaybe you need to register the acbion or provide an appropriate Action annotation on the method4you want to call.", false);
      TweenType tweenType0 = TweenType.SIZE_BOTH;
      float[] floatArray0 = trigger0.getTweenValues(tweenType0);
      Direction direction0 = Direction.DOWN;
      Spawnpoint spawnpoint0 = new Spawnpoint(direction0, "de.gurkenlabs.litiengine.Direction");
      TweenType tweenType1 = TweenType.POSITION_X;
      spawnpoint0.setTweenValues(tweenType1, floatArray0);
      assertEquals(32.0, spawnpoint0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint(7, 7, (-747.0399676));
      EntityTransformListener entityTransformListener0 = mock(EntityTransformListener.class, new ViolatedAssumptionAnswer());
      spawnpoint0.removeListener(entityTransformListener0);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(7, spawnpoint0.getMapId());
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      Trigger.TriggerActivation trigger_TriggerActivation0 = Trigger.TriggerActivation.COLLISION;
      Trigger trigger0 = new Trigger(trigger_TriggerActivation0, "");
      spawnpoint0.removeListener((EntityRenderedListener) trigger0);
      assertEquals(0.0, trigger0.getY(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, trigger0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint(7, 7, (-747.0399676));
      spawnpoint0.removeListener((EntityRenderListener) spawnpoint0);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(7, spawnpoint0.getMapId());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      EntityListener entityListener0 = mock(EntityListener.class, new ViolatedAssumptionAnswer());
      spawnpoint0.removeListener(entityListener0);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.onRendered(spawnpoint0);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      MockThread mockThread0 = new MockThread("");
      spawnpoint0.register("", mockThread0);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Direction direction0 = Direction.LEFT;
      Spawnpoint spawnpoint0 = new Spawnpoint((-72), (Point2D) null, direction0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "@hE(F-ZCjWR&");
      EntityAction entityAction0 = spawnpoint0.register("@hE(F-ZCjWR&", mockThread0);
      assertNotNull(entityAction0);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals((-72), spawnpoint0.getMapId());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      double double0 = spawnpoint0.getY();
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint((-1075), (-678.844437), 1927.3806899207366);
      spawnpoint0.getY();
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals((-1075), spawnpoint0.getMapId());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Trigger.TriggerActivation trigger_TriggerActivation0 = Trigger.TriggerActivation.INTERACT;
      Trigger trigger0 = new Trigger(trigger_TriggerActivation0, (String) null, true);
      double double0 = trigger0.getX();
      assertEquals(32.0, trigger0.getHeight(), 0.01);
      assertEquals(0.0, trigger0.getY(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(32.0, trigger0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint(677, 3269.0, 677);
      spawnpoint0.getX();
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(677, spawnpoint0.getMapId());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SoundSource soundSource0 = new SoundSource((-2726.545), 0.5, 0.5, (-2726.545));
      double double0 = soundSource0.getX();
      assertEquals(0.5, soundSource0.getY(), 0.01);
      assertEquals((-2726.545), soundSource0.getHeight(), 0.01);
      assertEquals(0.5, soundSource0.getWidth(), 0.01);
      assertEquals((-2726.545), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.setWidth(0.0);
      double double0 = spawnpoint0.getWidth();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint(2, 2, 2);
      double double0 = spawnpoint0.getWidth();
      assertEquals(2, spawnpoint0.getMapId());
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint((-737), (Point2D) null);
      String string0 = spawnpoint0.getName();
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals((-737), spawnpoint0.getMapId());
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint(3, 3, 0.0);
      int int0 = spawnpoint0.getMapId();
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Direction direction0 = Direction.LEFT;
      Spawnpoint spawnpoint0 = new Spawnpoint((-72), (Point2D) null, direction0);
      int int0 = spawnpoint0.getMapId();
      assertEquals((-72), int0);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Trigger.TriggerActivation trigger_TriggerActivation0 = Trigger.TriggerActivation.INTERACT;
      Trigger trigger0 = new Trigger(trigger_TriggerActivation0, "`@0");
      double double0 = trigger0.getHeight();
      assertEquals(32.0, double0, 0.01);
      assertEquals(32.0, trigger0.getWidth(), 0.01);
      assertEquals(0.0, trigger0.getX(), 0.01);
      assertEquals(0.0, trigger0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StaticShadowType staticShadowType0 = StaticShadowType.RIGHTLEFT;
      StaticShadow staticShadow0 = new StaticShadow(staticShadowType0);
      Class<IEntityController> class0 = IEntityController.class;
      staticShadow0.getController(class0);
      assertEquals(0.0, staticShadow0.getY(), 0.01);
      assertEquals(0.0, staticShadow0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint(2, 2, 2);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)spawnpoint0.getBoundingBox();
      assertNotNull(rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(2, spawnpoint0.getMapId());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint((-716), (-716), (-716));
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)spawnpoint0.getBoundingBox();
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-716), spawnpoint0.getMapId());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Direction direction0 = Direction.UNDEFINED;
      Spawnpoint spawnpoint0 = new Spawnpoint((Point2D) null, direction0);
      // Undeclared exception!
      try { 
        spawnpoint0.setY(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.entities.Entity", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      EntityMessageListener entityMessageListener0 = mock(EntityMessageListener.class, new ViolatedAssumptionAnswer());
      spawnpoint0.onMessage(entityMessageListener0);
      // Undeclared exception!
      try { 
        spawnpoint0.sendMessage((Object) null, "y'|rkX>HQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      // Undeclared exception!
      try { 
        spawnpoint0.rendering((EntityRenderEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.entities.Entity", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      // Undeclared exception!
      try { 
        spawnpoint0.rendered((EntityRenderEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.entities.Entity", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StaticShadowType staticShadowType0 = StaticShadowType.RIGHT;
      StaticShadow staticShadow0 = new StaticShadow(staticShadowType0);
      // Undeclared exception!
      try { 
        staticShadow0.removeTag("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class de.gurkenlabs.litiengine.Game
         //
         verifyException("de.gurkenlabs.litiengine.entities.Entity", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CombatEntity combatEntity0 = new CombatEntity();
      EntityMessageListener entityMessageListener0 = mock(EntityMessageListener.class, new ViolatedAssumptionAnswer());
      combatEntity0.onMessage(",XQ62eneN1}Ftp", entityMessageListener0);
      // Undeclared exception!
      try { 
        combatEntity0.removeListener((EntityMessageListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      // Undeclared exception!
      try { 
        spawnpoint0.removeListener((EntityListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CombatEntity combatEntity0 = new CombatEntity();
      // Undeclared exception!
      try { 
        combatEntity0.onMessage("particleAntiAliasing", (EntityMessageListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      // Undeclared exception!
      try { 
        spawnpoint0.onMessage((EntityMessageListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Direction direction0 = Direction.UNDEFINED;
      Spawnpoint spawnpoint0 = new Spawnpoint((Point2D) null, direction0);
      // Undeclared exception!
      try { 
        spawnpoint0.getY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.entities.Entity", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Direction direction0 = Direction.UNDEFINED;
      Spawnpoint spawnpoint0 = new Spawnpoint((Point2D) null, direction0);
      // Undeclared exception!
      try { 
        spawnpoint0.getCenter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.entities.Entity", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint(6, (Point2D) null);
      // Undeclared exception!
      try { 
        spawnpoint0.getBoundingBox();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.entities.Entity", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      // Undeclared exception!
      try { 
        spawnpoint0.addListener((EntityListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      // Undeclared exception!
      try { 
        spawnpoint0.addEntityRenderListener((EntityRenderListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      // Undeclared exception!
      try { 
        spawnpoint0.addController((IEntityController) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.entities.EntityControllers", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      String string0 = spawnpoint0.toString();
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals("#0: Spawnpoint", string0);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Trigger.TriggerActivation trigger_TriggerActivation0 = Trigger.TriggerActivation.INTERACT;
      Trigger trigger0 = new Trigger(trigger_TriggerActivation0, "", "wF+jnxZJvr<3", true);
      String string0 = trigger0.toString();
      assertEquals(0.0, trigger0.getX(), 0.01);
      assertEquals(32.0, trigger0.getHeight(), 0.01);
      assertEquals(0.0, trigger0.getY(), 0.01);
      assertEquals("#0: Trigger", string0);
      assertEquals(32.0, trigger0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Trigger.TriggerActivation trigger_TriggerActivation0 = Trigger.TriggerActivation.COLLISION;
      Trigger trigger0 = new Trigger(trigger_TriggerActivation0, ")mdO", "net.java.games.input.PluginClassLoader$JarFileFilter", true);
      String string0 = trigger0.toString();
      assertEquals("#0: )mdO", string0);
      assertEquals(0.0, trigger0.getX(), 0.01);
      assertEquals(32.0, trigger0.getHeight(), 0.01);
      assertEquals(0.0, trigger0.getY(), 0.01);
      assertEquals(32.0, trigger0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EntityMessageListener entityMessageListener0 = mock(EntityMessageListener.class, new ViolatedAssumptionAnswer());
      Spawnpoint spawnpoint0 = new Spawnpoint(100, 1.62012815976532);
      EntityMessageListener entityMessageListener1 = mock(EntityMessageListener.class, new ViolatedAssumptionAnswer());
      spawnpoint0.onMessage(entityMessageListener1);
      spawnpoint0.onMessage("", entityMessageListener0);
      assertEquals(0, spawnpoint0.getMapId());
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint((-716), (-716), (-716));
      spawnpoint0.setAngle((-716));
      assertEquals((-716.0), spawnpoint0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CollisionBox collisionBox0 = new CollisionBox(0.5, 0.5);
      StaticShadow staticShadow0 = new StaticShadow(collisionBox0);
      assertEquals(0, staticShadow0.getMapId());
      assertTrue(collisionBox0.hasCollision());
      assertEquals(0.0, staticShadow0.getX(), 0.01);
      assertEquals(0.0, staticShadow0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      double double0 = spawnpoint0.getAngle();
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      int int0 = spawnpoint0.getMapId();
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Trigger.TriggerActivation trigger_TriggerActivation0 = Trigger.TriggerActivation.COLLISION;
      Trigger trigger0 = new Trigger(trigger_TriggerActivation0, "BqZYFfDoFUZyi-qE0Zb", true);
      trigger0.isLoaded();
      assertEquals(32.0, trigger0.getHeight(), 0.01);
      assertEquals(0.0, trigger0.getX(), 0.01);
      assertEquals(0.0, trigger0.getY(), 0.01);
      assertEquals(32.0, trigger0.getCollisionBoxWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint(7, 7, (-747.0399676));
      spawnpoint0.getY();
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(7, spawnpoint0.getMapId());
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Trigger.TriggerActivation trigger_TriggerActivation0 = Trigger.TriggerActivation.COLLISION;
      Trigger trigger0 = new Trigger(trigger_TriggerActivation0, "!", "!", true);
      String string0 = trigger0.getName();
      assertEquals(0.0, trigger0.getX(), 0.01);
      assertEquals(0.0, trigger0.getY(), 0.01);
      assertEquals(32.0, trigger0.getHeight(), 0.01);
      assertEquals("!", string0);
      assertEquals(32.0, trigger0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.animations();
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      EntityMessageListener entityMessageListener0 = mock(EntityMessageListener.class, new ViolatedAssumptionAnswer());
      spawnpoint0.onMessage(entityMessageListener0);
      EntityMessageListener entityMessageListener1 = mock(EntityMessageListener.class, new ViolatedAssumptionAnswer());
      spawnpoint0.onMessage(entityMessageListener1);
      spawnpoint0.sendMessage("", "");
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.sendMessage("", (String) null);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Trigger.TriggerActivation trigger_TriggerActivation0 = Trigger.TriggerActivation.INTERACT;
      Trigger trigger0 = new Trigger(trigger_TriggerActivation0, "BqZYFfDoFUZyi-qE0Zb", true);
      EntityTransformListener entityTransformListener0 = mock(EntityTransformListener.class, new ViolatedAssumptionAnswer());
      trigger0.addTransformListener(entityTransformListener0);
      trigger0.setWidth((-2002));
      assertEquals((-2002.0), trigger0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      MapArea mapArea0 = new MapArea(0.0, 0.0, 0.0, 1107.23100963);
      boolean boolean0 = spawnpoint0.canRender(mapArea0);
      assertTrue(boolean0);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(1107.23100963, mapArea0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(0.0, mapArea0.getY(), 0.01);
      assertEquals(0, mapArea0.getMapId());
      assertEquals(0.0, mapArea0.getX(), 0.01);
      assertEquals(0.0, mapArea0.getWidth(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      boolean boolean0 = spawnpoint0.canRender(spawnpoint0);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertTrue(boolean0);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StaticShadowType staticShadowType0 = StaticShadowType.RIGHTDOWN;
      StaticShadow staticShadow0 = new StaticShadow(staticShadowType0);
      boolean boolean0 = staticShadow0.canRender((IEntity) null);
      assertEquals(0.0, staticShadow0.getY(), 0.01);
      assertEquals(0.0, staticShadow0.getX(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      EntityRenderEvent entityRenderEvent0 = new EntityRenderEvent((Graphics2D) null, spawnpoint0);
      Direction direction0 = Direction.DOWN;
      Spawnpoint spawnpoint1 = new Spawnpoint(direction0);
      spawnpoint1.rendered(entityRenderEvent0);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint1.getY(), 0.01);
      assertEquals(0.0, spawnpoint1.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      EntityRenderEvent entityRenderEvent0 = new EntityRenderEvent((Graphics2D) null, spawnpoint0);
      spawnpoint0.rendered(entityRenderEvent0);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StaticShadowType staticShadowType0 = StaticShadowType.LEFTDOWN;
      StaticShadow staticShadow0 = new StaticShadow(staticShadowType0);
      EntityRenderEvent entityRenderEvent0 = new EntityRenderEvent((Graphics2D) null, staticShadow0);
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.rendering(entityRenderEvent0);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      EntityRenderEvent entityRenderEvent0 = new EntityRenderEvent((Graphics2D) null, spawnpoint0);
      spawnpoint0.rendering(entityRenderEvent0);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      EntityListener entityListener0 = mock(EntityListener.class, new ViolatedAssumptionAnswer());
      spawnpoint0.addListener(entityListener0);
      spawnpoint0.removed((Environment) null);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertFalse(spawnpoint0.isLoaded());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      EntityListener entityListener0 = mock(EntityListener.class, new ViolatedAssumptionAnswer());
      spawnpoint0.addListener(entityListener0);
      spawnpoint0.loaded((Environment) null);
      assertTrue(spawnpoint0.isLoaded());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Trigger.TriggerActivation trigger_TriggerActivation0 = Trigger.TriggerActivation.COLLISION;
      Trigger trigger0 = new Trigger(trigger_TriggerActivation0, "", "COLLISION_HEIGHT");
      trigger0.perform("COLLISION_HEIGHT");
      assertEquals(32.0, trigger0.getHeight(), 0.01);
      assertEquals(0.0, trigger0.getX(), 0.01);
      assertEquals(0.0, trigger0.getY(), 0.01);
      assertEquals(0, trigger0.getMapId());
      assertEquals(32.0, trigger0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      TweenType tweenType0 = TweenType.HITPOINTS;
      spawnpoint0.setTweenValues(tweenType0, (float[]) null);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      TweenType tweenType0 = TweenType.SIZE_BOTH;
      // Undeclared exception!
      try { 
        spawnpoint0.setTweenValues(tweenType0, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.entities.Entity", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      TweenType tweenType0 = TweenType.SIZE_HEIGHT;
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        spawnpoint0.setTweenValues(tweenType0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("de.gurkenlabs.litiengine.entities.Entity", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      TweenType tweenType0 = TweenType.POSITION_XY;
      float[] floatArray0 = new float[7];
      spawnpoint0.setTweenValues(tweenType0, floatArray0);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      TweenType tweenType0 = TweenType.OPACITY;
      spawnpoint0.getTweenValues(tweenType0);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      TweenType tweenType0 = TweenType.SIZE_HEIGHT;
      float[] floatArray0 = spawnpoint0.getTweenValues(tweenType0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      TweenType tweenType0 = TweenType.SIZE_WIDTH;
      float[] floatArray0 = spawnpoint0.getTweenValues(tweenType0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint((-737), (Point2D) null);
      TweenType tweenType0 = TweenType.POSITION_XY;
      // Undeclared exception!
      try { 
        spawnpoint0.getTweenValues(tweenType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.entities.Entity", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CollisionBox collisionBox0 = new CollisionBox();
      TweenType tweenType0 = TweenType.POSITION_Y;
      float[] floatArray0 = collisionBox0.getTweenValues(tweenType0);
      assertEquals(0.0, collisionBox0.getX(), 0.01);
      assertEquals(32.0, collisionBox0.getHeight(), 0.01);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(32.0, collisionBox0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      TweenType tweenType0 = TweenType.POSITION_X;
      float[] floatArray0 = spawnpoint0.getTweenValues(tweenType0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Direction direction0 = Direction.LEFT;
      Spawnpoint spawnpoint0 = new Spawnpoint(10, 10, direction0);
      spawnpoint0.addTag("");
      boolean boolean0 = spawnpoint0.hasTag("");
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(0, spawnpoint0.getMapId());
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      boolean boolean0 = spawnpoint0.hasTag("");
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.perform("");
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.perform((String) null);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.setVisible(false);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Trigger.TriggerActivation trigger_TriggerActivation0 = Trigger.TriggerActivation.COLLISION;
      Trigger trigger0 = new Trigger(trigger_TriggerActivation0, ")mdO", "net.java.games.input.PluginClassLoader$JarFileFilter", true);
      trigger0.getBoundingBox();
      Rectangle2D rectangle2D0 = trigger0.getBoundingBox();
      assertEquals(")mdO", trigger0.getName());
      assertNotNull(rectangle2D0);
      assertEquals(16.0, rectangle2D0.getCenterY(), 0.01);
      assertEquals(16.0, rectangle2D0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CombatEntity combatEntity0 = new CombatEntity();
      EntityMessageListener entityMessageListener0 = mock(EntityMessageListener.class, new ViolatedAssumptionAnswer());
      combatEntity0.onMessage("", entityMessageListener0);
      EntityMessageListener entityMessageListener1 = mock(EntityMessageListener.class, new ViolatedAssumptionAnswer());
      combatEntity0.removeListener(entityMessageListener1);
      assertEquals(32.0, combatEntity0.getHeight(), 0.01);
      assertEquals(0.0, combatEntity0.getX(), 0.01);
      assertEquals(0.0, combatEntity0.getY(), 0.01);
      assertEquals(32.0, combatEntity0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      // Undeclared exception!
      try { 
        spawnpoint0.removeListener((EntityTransformListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.sendMessage("", "");
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      // Undeclared exception!
      try { 
        spawnpoint0.addTransformListener((EntityTransformListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      TweenType tweenType0 = TweenType.ANGLE;
      float[] floatArray0 = new float[1];
      spawnpoint0.setTweenValues(tweenType0, floatArray0);
      assertEquals(0.0, spawnpoint0.getAngle(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Trigger.TriggerActivation trigger_TriggerActivation0 = Trigger.TriggerActivation.COLLISION;
      Trigger trigger0 = new Trigger(trigger_TriggerActivation0, "!", "!");
      MockThread mockThread0 = new MockThread("Entity \"{0}\" could not perform the action \"{1}\". \nMaybe you need to register the action or provide an appropriate Action annotation on the method you want to call.");
      EntityAction entityAction0 = trigger0.register("!", mockThread0);
      assertNotNull(entityAction0);
      
      trigger0.perform("!");
      assertEquals(32.0, trigger0.getCollisionBoxHeight(), 0.01);
      assertEquals(32.0, trigger0.getCollisionBoxWidth(), 0.01);
      assertEquals(0.0, trigger0.getY(), 0.01);
      assertEquals(0.0, trigger0.getX(), 0.01);
      assertEquals("!", trigger0.getName());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.getRenderType();
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StaticShadowType staticShadowType0 = StaticShadowType.RIGHT;
      StaticShadow staticShadow0 = new StaticShadow(staticShadowType0);
      TweenType tweenType0 = TweenType.ANGLE;
      float[] floatArray0 = staticShadow0.getTweenValues(tweenType0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(0.0, staticShadow0.getX(), 0.01);
      assertEquals(0.0, staticShadow0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.attachControllers();
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.setRenderWithLayer(true);
      assertTrue(spawnpoint0.renderWithLayer());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      // Undeclared exception!
      try { 
        spawnpoint0.onRendered((EntityRenderedListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.getControllers();
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.actions();
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      RenderType renderType0 = RenderType.UI;
      spawnpoint0.setRenderType(renderType0);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      boolean boolean0 = spawnpoint0.isVisible();
      assertFalse(boolean0);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.getTags();
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.detachControllers();
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      // Undeclared exception!
      try { 
        spawnpoint0.removeListener((EntityRenderListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Trigger.TriggerActivation trigger_TriggerActivation0 = Trigger.TriggerActivation.COLLISION;
      Trigger trigger0 = new Trigger(trigger_TriggerActivation0, "!", "!");
      trigger0.getEnvironment();
      assertEquals(32.0, trigger0.getCollisionBoxWidth(), 0.01);
      assertEquals(32.0, trigger0.getCollisionBoxHeight(), 0.01);
      assertEquals(0.0, trigger0.getX(), 0.01);
      assertEquals(0.0, trigger0.getY(), 0.01);
      assertEquals("!", trigger0.getName());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.behavior();
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      MapArea mapArea0 = new MapArea();
      spawnpoint0.addEntityRenderListener(mapArea0);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, mapArea0.getX(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(0.0, mapArea0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      // Undeclared exception!
      try { 
        spawnpoint0.removeListener((EntityRenderedListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Creature creature0 = null;
      try {
        creature0 = new Creature();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class de.gurkenlabs.litiengine.Game
         //
         verifyException("de.gurkenlabs.litiengine.entities.Creature", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint();
      spawnpoint0.renderWithLayer();
      assertEquals(0.0, spawnpoint0.getY(), 0.01);
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals(0.0, spawnpoint0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CombatEntity combatEntity0 = new CombatEntity();
      Point2D.Double point2D_Double0 = (Point2D.Double)combatEntity0.getCenter();
      assertEquals(16.0, point2D_Double0.y, 0.01);
      assertEquals(16.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Spawnpoint spawnpoint0 = new Spawnpoint((-737), (Point2D) null);
      spawnpoint0.getProperties();
      assertEquals(1.0, spawnpoint0.getHeight(), 0.01);
      assertEquals((-737), spawnpoint0.getMapId());
      assertEquals(1.0, spawnpoint0.getWidth(), 0.01);
  }
}

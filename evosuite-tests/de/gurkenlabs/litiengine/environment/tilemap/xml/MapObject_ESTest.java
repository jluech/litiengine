/*
 * This file was automatically generated by EvoSuite
 * Thu May 27 07:29:05 GMT 2021
 */

package de.gurkenlabs.litiengine.environment.tilemap.xml;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.gurkenlabs.litiengine.environment.tilemap.IMapObject;
import de.gurkenlabs.litiengine.environment.tilemap.IPolyShape;
import de.gurkenlabs.litiengine.environment.tilemap.xml.Blueprint;
import de.gurkenlabs.litiengine.environment.tilemap.xml.MapObject;
import de.gurkenlabs.litiengine.environment.tilemap.xml.MapObjectLayer;
import de.gurkenlabs.litiengine.environment.tilemap.xml.PolyShape;
import de.gurkenlabs.litiengine.environment.tilemap.xml.TmxMap;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.net.URL;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapObject_ESTest extends MapObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.setY(1646.02F);
      MapObject[] mapObjectArray0 = new MapObject[5];
      mapObjectArray0[0] = (MapObject) blueprint0;
      mapObjectArray0[1] = (MapObject) blueprint0;
      Blueprint blueprint1 = null;
      try {
        blueprint1 = new Blueprint("KF*~VDR'W", mapObjectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.environment.tilemap.xml.MapObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MapObject mapObject0 = new MapObject("null");
      mapObject0.setLocation((-3839.0F), 1022.53864F);
      float float0 = mapObject0.getY();
      assertEquals(0.0F, mapObject0.getHeight(), 0.01F);
      assertEquals(0.0F, mapObject0.getWidth(), 0.01F);
      assertEquals(1022.53864F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.setX((-1883.086F));
      float float0 = blueprint0.getX();
      assertEquals((-1883.086F), float0, 0.01F);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.setWidth(303.772F);
      float float0 = blueprint0.getWidth();
      assertEquals(303.772F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.getType();
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.setType(" == 0");
      blueprint0.getType();
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      PolyShape polyShape0 = new PolyShape();
      blueprint0.setPolyline(polyShape0);
      blueprint0.getPolyline();
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MapObject mapObject0 = new MapObject();
      PolyShape polyShape0 = new PolyShape();
      mapObject0.setPolygon(polyShape0);
      mapObject0.getPolygon();
      assertEquals(0.0F, mapObject0.getWidth(), 0.01F);
      assertEquals(0.0F, mapObject0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MapObject[] mapObjectArray0 = new MapObject[0];
      Blueprint blueprint0 = new Blueprint("C", mapObjectArray0);
      String string0 = blueprint0.getName();
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertNotNull(string0);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      MapObjectLayer mapObjectLayer0 = new MapObjectLayer();
      mapObjectLayer0.setVisible(false);
      blueprint0.setLayer(mapObjectLayer0);
      blueprint0.getLayer();
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      MapObjectLayer mapObjectLayer0 = new MapObjectLayer();
      blueprint0.setLayer(mapObjectLayer0);
      blueprint0.getLayer();
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MapObject mapObject0 = new MapObject("");
      mapObject0.setId(467);
      int int0 = mapObject0.getId();
      assertEquals(467, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.setId((-12));
      int int0 = blueprint0.getId();
      assertEquals((-12), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.setHeight(3.0F);
      float float0 = blueprint0.getHeight();
      assertEquals(3.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.setGridId(68);
      int int0 = blueprint0.getGridId();
      assertEquals(68, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.setLocation(0.0F, (-1.0F));
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      
      IMapObject[] iMapObjectArray0 = new IMapObject[7];
      iMapObjectArray0[0] = (IMapObject) blueprint0;
      iMapObjectArray0[1] = (IMapObject) blueprint0;
      iMapObjectArray0[2] = (IMapObject) blueprint0;
      iMapObjectArray0[3] = (IMapObject) blueprint0;
      iMapObjectArray0[4] = (IMapObject) blueprint0;
      iMapObjectArray0[5] = (IMapObject) blueprint0;
      iMapObjectArray0[6] = (IMapObject) blueprint0;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)MapObject.getBounds(iMapObjectArray0);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(4.9E-324, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
      
      IMapObject[] iMapObjectArray0 = new IMapObject[1];
      iMapObjectArray0[0] = (IMapObject) blueprint0;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)MapObject.getBounds(iMapObjectArray0);
      assertEquals(4.9E-324, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(4.9E-324, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IMapObject[] iMapObjectArray0 = new IMapObject[0];
      Rectangle2D rectangle2D0 = MapObject.getBounds(iMapObjectArray0);
      assertEquals(8.988465674311579E307, rectangle2D0.getCenterY(), 0.01);
      assertEquals(8.988465674311579E307, rectangle2D0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MapObject mapObject0 = new MapObject("");
      mapObject0.setLocation((-830.9957F), 0.0F);
      assertEquals(0.0F, mapObject0.getWidth(), 0.01F);
      assertEquals(0.0F, mapObject0.getHeight(), 0.01F);
      
      IMapObject[] iMapObjectArray0 = new IMapObject[3];
      iMapObjectArray0[0] = (IMapObject) mapObject0;
      iMapObjectArray0[1] = (IMapObject) mapObject0;
      iMapObjectArray0[2] = (IMapObject) mapObject0;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)MapObject.getBounds(iMapObjectArray0);
      assertEquals(4.9E-324, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.setLocation(362.3015F, (-4256.167F));
      TreeSet<Blueprint> treeSet0 = new TreeSet<Blueprint>();
      PriorityQueue<IMapObject> priorityQueue0 = new PriorityQueue<IMapObject>((SortedSet<? extends IMapObject>) treeSet0);
      priorityQueue0.add(blueprint0);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      
      Rectangle2D rectangle2D0 = MapObject.getBounds((Iterable<IMapObject>) priorityQueue0);
      assertEquals((-2128.08349609375), rectangle2D0.getCenterY(), 0.01);
      assertEquals(362.301513671875, rectangle2D0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MapObject mapObject0 = new MapObject("no stagger index");
      mapObject0.setY((-1.0F));
      Rectangle2D rectangle2D0 = mapObject0.getBoundingBox();
      assertEquals(0.0, rectangle2D0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MapObject mapObject0 = new MapObject("null");
      mapObject0.setLocation((-3839.0F), 1022.53864F);
      Rectangle2D rectangle2D0 = mapObject0.getBoundingBox();
      assertEquals((-3839.0), rectangle2D0.getMaxX(), 0.01);
      assertEquals(1022.5386352539062, rectangle2D0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapObject.getBounds((Iterable<IMapObject>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.environment.tilemap.xml.MapObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MapObject mapObject0 = null;
      try {
        mapObject0 = new MapObject((MapObject) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.environment.tilemap.xml.CustomPropertyProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      MapObject mapObject0 = null;
      try {
        mapObject0 = new MapObject(blueprint0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class de.gurkenlabs.litiengine.Game
         //
         verifyException("de.gurkenlabs.litiengine.environment.tilemap.xml.MapObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      MapObject mapObject0 = null;
      try {
        mapObject0 = new MapObject(blueprint0, 149);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class de.gurkenlabs.litiengine.Game
         //
         verifyException("de.gurkenlabs.litiengine.environment.tilemap.xml.MapObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MapObject mapObject0 = null;
      try {
        mapObject0 = new MapObject((MapObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.environment.tilemap.xml.CustomPropertyProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MapObject mapObject0 = new MapObject("");
      boolean boolean0 = mapObject0.isEllipse();
      assertEquals(0.0F, mapObject0.getWidth(), 0.01F);
      assertEquals(0.0F, mapObject0.getHeight(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MapObject mapObject0 = new MapObject();
      mapObject0.setLocation((float) (-1), (float) (-1));
      float float0 = mapObject0.getY();
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals(0.0F, mapObject0.getHeight(), 0.01F);
      assertEquals(0.0F, mapObject0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      float float0 = blueprint0.getX();
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.setName((String) null);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      TreeSet<Blueprint> treeSet0 = new TreeSet<Blueprint>();
      PriorityQueue<IMapObject> priorityQueue0 = new PriorityQueue<IMapObject>((SortedSet<? extends IMapObject>) treeSet0);
      priorityQueue0.add(blueprint0);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)MapObject.getBounds((Iterable<IMapObject>) priorityQueue0);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(4.9E-324, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(4.9E-324, rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector<IMapObject> vector0 = new Vector<IMapObject>();
      Rectangle2D rectangle2D0 = MapObject.getBounds((Iterable<IMapObject>) vector0);
      assertEquals(8.988465674311579E307, rectangle2D0.getCenterX(), 0.01);
      assertEquals(8.988465674311579E307, rectangle2D0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      int int0 = blueprint0.getId();
      assertEquals(0, int0);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      float float0 = blueprint0.getWidth();
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MapObject[] mapObjectArray0 = new MapObject[0];
      Blueprint blueprint0 = new Blueprint("ik1E", true, mapObjectArray0);
      blueprint0.getLayer();
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      float float0 = blueprint0.getHeight();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MapObject mapObject0 = new MapObject("");
      mapObject0.getType();
      assertEquals(0.0F, mapObject0.getHeight(), 0.01F);
      assertEquals(0.0F, mapObject0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.getName();
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MapObjectLayer mapObjectLayer0 = new MapObjectLayer();
      TmxMap tmxMap0 = new TmxMap();
      mapObjectLayer0.setMap(tmxMap0);
      Blueprint blueprint0 = new Blueprint();
      blueprint0.setLayer(mapObjectLayer0);
      float float0 = blueprint0.getY();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MapObject[] mapObjectArray0 = new MapObject[0];
      Blueprint blueprint0 = new Blueprint("C", true, mapObjectArray0);
      blueprint0.setGridId(536870912);
      // Undeclared exception!
      try { 
        blueprint0.finish((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.environment.tilemap.xml.MapObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      URL uRL0 = MockURL.getHttpExample();
      blueprint0.finish(uRL0);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MapObject mapObject0 = new MapObject("no stagger index");
      boolean boolean0 = mapObject0.isPoint();
      assertEquals(0.0F, mapObject0.getWidth(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, mapObject0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      PolyShape polyShape0 = new PolyShape();
      blueprint0.setPolygon(polyShape0);
      boolean boolean0 = blueprint0.isPolygon();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MapObject mapObject0 = new MapObject("no stagger index");
      boolean boolean0 = mapObject0.isPolygon();
      assertEquals(0.0F, mapObject0.getHeight(), 0.01F);
      assertEquals(0.0F, mapObject0.getWidth(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      PolyShape polyShape0 = new PolyShape((IPolyShape) null);
      blueprint0.setPolyline(polyShape0);
      boolean boolean0 = blueprint0.isPolyline();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MapObject[] mapObjectArray0 = new MapObject[0];
      Blueprint blueprint0 = new Blueprint("vXr:Rsga'0m<85AAT4c", mapObjectArray0);
      boolean boolean0 = blueprint0.isPolyline();
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.setLocation((float) 1, (float) 1);
      Rectangle2D rectangle2D0 = blueprint0.getBoundingBox();
      assertEquals(1.0, rectangle2D0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.setLocation(3.0F, 3.0F);
      float float0 = blueprint0.getX();
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertEquals(3.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.setName("K");
      String string0 = blueprint0.toString();
      assertEquals("#0: 'K' null; x: 0.0; y: 0.0; width: 0.0; height: 0.0", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.setLocation((Point2D) null);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MapObject mapObject0 = new MapObject("");
      mapObject0.setName("");
      assertEquals(0.0F, mapObject0.getWidth(), 0.01F);
      assertEquals(0.0F, mapObject0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      Ellipse2D ellipse2D0 = blueprint0.getEllipse();
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
      assertNull(ellipse2D0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      int int0 = blueprint0.getGridId();
      assertEquals(0, int0);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IMapObject[] iMapObjectArray0 = new IMapObject[1];
      // Undeclared exception!
      try { 
        MapObject.getBounds(iMapObjectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.environment.tilemap.xml.MapObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      Point2D.Double point2D_Double0 = (Point2D.Double)blueprint0.getLocation();
      blueprint0.setLocation((Point2D) point2D_Double0);
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      MapObjectLayer mapObjectLayer0 = new MapObjectLayer();
      blueprint0.setLayer(mapObjectLayer0);
      float float0 = blueprint0.getY();
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.setGridId((-1393));
      int int0 = blueprint0.getGridId();
      assertEquals((-1393), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MapObject mapObject0 = null;
      try {
        mapObject0 = new MapObject((MapObject) null, (-1778));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.environment.tilemap.xml.CustomPropertyProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.getPolygon();
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.getPolyline();
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      String string0 = blueprint0.toString();
      assertEquals("#0: null; x: 0.0; y: 0.0; width: 0.0; height: 0.0", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      Rectangle2D rectangle2D0 = blueprint0.getBoundingBox();
      assertEquals(0.0, rectangle2D0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      blueprint0.getTile();
      assertEquals(0.0F, blueprint0.getWidth(), 0.01F);
      assertEquals(0.0F, blueprint0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Blueprint blueprint0 = new Blueprint();
      MapObject mapObject0 = null;
      try {
        mapObject0 = new MapObject(blueprint0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class de.gurkenlabs.litiengine.Game
         //
         verifyException("de.gurkenlabs.litiengine.environment.tilemap.xml.MapObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MapObject mapObject0 = new MapObject("no stagger index");
      mapObject0.getText();
      assertEquals(0.0F, mapObject0.getWidth(), 0.01F);
      assertEquals(0.0F, mapObject0.getHeight(), 0.01F);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat May 29 22:09:23 GMT 2021
 */

package de.gurkenlabs.litiengine.gui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.gurkenlabs.litiengine.gui.Appearance;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Paint;
import java.awt.Stroke;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Appearance_ESTest extends Appearance_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Color color0 = Color.GRAY;
      appearance0.setBackgroundColor1(color0);
      appearance0.setHorizontalBackgroundGradient(true);
      appearance0.setBackgroundColor2(color0);
      appearance0.getBackgroundPaint(807.815329, 0.0);
      assertTrue(appearance0.isHorizontalBackgroundGradient());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Color color0 = Color.white;
      Appearance appearance1 = new Appearance(color0, color0);
      appearance0.setBorderRadius(0.7529412F);
      boolean boolean0 = appearance0.equals(appearance1);
      assertEquals(0.7529412F, appearance0.getBorderRadius(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Color color0 = Color.pink;
      Appearance appearance0 = new Appearance(color0, color0);
      appearance0.fireOnChangeEvent();
      assertFalse(appearance0.isTransparentBackground());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Color color0 = Color.orange;
      Appearance appearance1 = new Appearance(color0);
      appearance0.update(appearance1);
      boolean boolean0 = appearance0.isTransparentBackground();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      appearance0.setHorizontalBackgroundGradient(true);
      boolean boolean0 = appearance0.isHorizontalBackgroundGradient();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Color color0 = Color.white;
      appearance0.setForeColor(color0);
      Color color1 = appearance0.getForeColor();
      assertSame(color1, color0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Color color0 = new Color(7, true);
      Appearance appearance0 = new Appearance(color0);
      appearance0.getForeColor();
      assertTrue(appearance0.isTransparentBackground());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Appearance appearance0 = new Appearance((Color) null);
      BasicStroke basicStroke0 = new BasicStroke(1463.76F, 1, 0, 1463.76F);
      appearance0.setBorderStyle(basicStroke0);
      appearance0.getBorderStyle();
      assertTrue(appearance0.isTransparentBackground());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      appearance0.setBorderRadius(1.0F);
      float float0 = appearance0.getBorderRadius();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Color color0 = Color.cyan;
      Appearance appearance0 = new Appearance(color0, color0);
      appearance0.setBorderRadius((-1185.0F));
      float float0 = appearance0.getBorderRadius();
      assertEquals((-1185.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Color color0 = Color.magenta;
      appearance0.setBorderColor(color0);
      Color color1 = appearance0.getBorderColor();
      assertEquals(0, color1.getGreen());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Color color0 = Color.green;
      appearance0.setBorderColor(color0);
      Color color1 = appearance0.getBorderColor();
      assertEquals(255, color1.getGreen());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Color color0 = new Color(298, true);
      appearance0.setBackgroundColor2(color0);
      Color color1 = appearance0.getBackgroundColor2();
      assertEquals(2, color1.getTransparency());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Color color0 = Color.red;
      appearance0.setBackgroundColor2(color0);
      Color color1 = appearance0.getBackgroundColor2();
      assertEquals(1, color1.getTransparency());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Color color0 = Color.magenta;
      appearance0.setBackgroundColor1(color0);
      Color color1 = appearance0.getBackgroundColor1();
      assertEquals(255, color1.getRed());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Color color0 = new Color(1676, true);
      appearance0.setBackgroundColor1(color0);
      Color color1 = appearance0.getBackgroundColor1();
      assertEquals(2, color1.getTransparency());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Color color0 = new Color(0.0F, 0.0F, 0.0F, 0.0F);
      Appearance appearance0 = new Appearance(color0, color0);
      Color color1 = appearance0.getBackgroundColor1();
      assertEquals(0, color1.getAlpha());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      // Undeclared exception!
      try { 
        appearance0.update((Appearance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.gui.Appearance", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      appearance0.onChange((Consumer<Appearance>) null);
      // Undeclared exception!
      try { 
        appearance0.setForeColor((Color) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.gui.Appearance", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Color color0 = Color.white;
      Appearance appearance0 = new Appearance(color0, color0);
      appearance0.onChange((Consumer<Appearance>) null);
      // Undeclared exception!
      try { 
        appearance0.setBackgroundColor2(color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.gui.Appearance", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      appearance0.onChange((Consumer<Appearance>) null);
      Color color0 = Color.CYAN;
      // Undeclared exception!
      try { 
        appearance0.setBackgroundColor1(color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.gui.Appearance", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      appearance0.onChange((Consumer<Appearance>) null);
      // Undeclared exception!
      try { 
        appearance0.fireOnChangeEvent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.gui.Appearance", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Color color0 = appearance0.getBorderColor();
      assertNull(color0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Color color0 = appearance0.getBackgroundColor1();
      assertNull(color0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Color color0 = appearance0.getBackgroundColor2();
      assertNull(color0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      boolean boolean0 = appearance0.isTransparentBackground();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Color color0 = Color.magenta;
      Appearance appearance0 = new Appearance(color0, color0);
      Stroke stroke0 = appearance0.getBorderStyle();
      assertNull(stroke0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Color color0 = Color.magenta;
      Appearance appearance0 = new Appearance(color0, color0);
      float float0 = appearance0.getBorderRadius();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      boolean boolean0 = appearance0.isHorizontalBackgroundGradient();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Color color0 = Color.magenta;
      Appearance appearance0 = new Appearance(color0, color0);
      appearance0.setTransparentBackground(true);
      assertTrue(appearance0.isTransparentBackground());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Color color0 = appearance0.getForeColor();
      assertNull(color0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Consumer<Appearance> consumer0 = (Consumer<Appearance>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      appearance0.onChange(consumer0);
      appearance0.setForeColor((Color) null);
      assertFalse(appearance0.isTransparentBackground());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Color color0 = Color.white;
      appearance0.setBackgroundColor1(color0);
      appearance0.setBackgroundColor2(color0);
      GradientPaint gradientPaint0 = (GradientPaint)appearance0.getBackgroundPaint(0.7529412F, 2806.385481700298);
      assertFalse(gradientPaint0.isCyclic());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Color color0 = Color.ORANGE;
      Appearance appearance0 = new Appearance(color0, color0);
      Color color1 = (Color)appearance0.getBackgroundPaint((-1.0), (-1.0));
      assertEquals(200, color1.getGreen());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Appearance appearance0 = new Appearance((Color) null);
      appearance0.getBackgroundPaint((-325.7025724), 1463.76F);
      assertTrue(appearance0.isTransparentBackground());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Paint paint0 = appearance0.getBackgroundPaint(2562.1602F, (-2572.7826628080315));
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Appearance appearance1 = new Appearance();
      boolean boolean0 = appearance0.equals(appearance1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Color color0 = Color.lightGray;
      Appearance appearance0 = new Appearance(color0, color0);
      appearance0.setBackgroundColor2(color0);
      Appearance appearance1 = new Appearance(color0, color0);
      boolean boolean0 = appearance0.equals(appearance1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Color color0 = Color.ORANGE;
      Appearance appearance0 = new Appearance(color0, color0);
      Appearance appearance1 = new Appearance();
      appearance0.update(appearance1);
      assertTrue(appearance1.equals((Object)appearance0));
      
      Appearance appearance2 = new Appearance(color0, color0);
      boolean boolean0 = appearance2.equals(appearance0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Appearance appearance1 = new Appearance();
      assertTrue(appearance1.equals((Object)appearance0));
      
      BasicStroke basicStroke0 = new BasicStroke(2562.1602F);
      appearance1.setBorderStyle(basicStroke0);
      boolean boolean0 = appearance1.equals(appearance0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Appearance appearance1 = new Appearance();
      assertTrue(appearance1.equals((Object)appearance0));
      
      Color color0 = Color.gray;
      appearance1.setBorderColor(color0);
      boolean boolean0 = appearance1.equals(appearance0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      appearance0.setBorderRadius(854.2F);
      Appearance appearance1 = new Appearance();
      boolean boolean0 = appearance1.equals(appearance0);
      assertEquals(854.2F, appearance0.getBorderRadius(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      appearance0.setHorizontalBackgroundGradient(true);
      Appearance appearance1 = new Appearance();
      boolean boolean0 = appearance1.equals(appearance0);
      assertTrue(appearance0.isHorizontalBackgroundGradient());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Color color0 = Color.white;
      Appearance appearance1 = new Appearance(color0);
      boolean boolean0 = appearance0.equals(appearance1);
      assertFalse(boolean0);
      assertTrue(appearance1.isTransparentBackground());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Appearance appearance0 = new Appearance((Color) null);
      boolean boolean0 = appearance0.equals("");
      assertFalse(boolean0);
      assertTrue(appearance0.isTransparentBackground());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      boolean boolean0 = appearance0.equals(appearance0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      Color color0 = Color.YELLOW;
      Appearance appearance1 = new Appearance(color0, (Color) null);
      boolean boolean0 = appearance0.equals(appearance1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Color color0 = new Color(0.0F, 0.0F, 0.0F, 0.0F);
      Appearance appearance0 = new Appearance(color0);
      appearance0.getForeColor();
      assertTrue(appearance0.isTransparentBackground());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Appearance appearance0 = new Appearance();
      appearance0.hashCode();
  }
}

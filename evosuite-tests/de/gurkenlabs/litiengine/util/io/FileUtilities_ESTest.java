/*
 * This file was automatically generated by EvoSuite
 * Sat May 29 20:29:55 GMT 2021
 */

package de.gurkenlabs.litiengine.util.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.gurkenlabs.litiengine.util.io.FileUtilities;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.file.Path;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileUtilities_ESTest extends FileUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileUtilities.getFileName("`H`)_=y<Hwsy", true);
      File file0 = null;
      // Undeclared exception!
      try { 
        FileUtilities.getExtension((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.io.FileUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("/Users/dacedreimane/Desktop/litiengine/././src/de/gurkenlabs/litiengine/entities/EntityMovedEvent.javalHctw^AP]y");
      mockFile0.toPath();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        FileUtilities.findFilesByExtension(linkedList1, (Path) null, "Q]*+~wL_(z3Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "..";
      FileUtilities.getFileName("..");
      FileUtilities.getParentDirPath("..");
      URI uRI0 = MockURI.aFileURI;
      FileUtilities.getParentDirPath(uRI0);
      FileUtilities.getExtension("nWUd4YQ9Ls/");
      FileUtilities.getExtension("..");
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        FileUtilities.findFilesByExtension((List<String>) null, path0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile(".", ".");
      Path path0 = mockFile0.toPath();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      FileUtilities.findFilesByExtension(linkedList1, path0, ".");
      FileUtilities.getFileName(".");
      FileUtilities.getParentDirPath("/Users/dacedreimane/Desktop/litiengine/de.gurkenlabs.litiengine.util.io.FileUtilities");
      FileUtilities.humanReadableByteCount((-785L));
      FileUtilities.getFileName("ku'9J[wS~uCU2DR.", false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0IJ#";
      stringArray0[1] = null;
      stringArray0[2] = null;
      FileUtilities.combine("/Users/dacedreimane/Desktop/litiengine/", stringArray0);
      FileUtilities.getExtension("VI1?.j>>-]rX}q");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("de.gurkenlabs.litiengine.util.io.FileUtilities");
      MockFile mockFile1 = new MockFile("-pJ9{", "de.gurkenlabs.litiengine.util.io.FileUtilities");
      FileUtilities.getExtension((File) mockFile1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-pJ9{");
      FileUtilities.getFileName(".JAR");
      FileUtilities.getParentDirPath("{4c5+3RU<1#\"3<Um");
      FileUtilities.humanReadableByteCount((-785L));
      FileUtilities.getFileName((String) null, true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "FileUtilities";
      stringArray0[1] = "f~Kv(x";
      stringArray0[2] = ".";
      FileUtilities.combine("null/", stringArray0);
      FileUtilities.getFileName("");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile(".", ".");
      Path path0 = mockFile0.toPath();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = FileUtilities.findFilesByExtension(linkedList1, path0, "+(4");
      FileUtilities.findFilesByExtension(list0, path0, "/Users/dacedreimane/Desktop/litiengine/././src/de/gurkenlabs/litiengine/entities/TriggerDeactivatedListener.java/Users/dacedreimane/Desktop/litiengine/././src/de/gurkenlabs/litiengine/entities/EntityListener.java");
      List<String> list1 = FileUtilities.findFilesByExtension(linkedList1, path0, "]fo_2s(L5s78:SB^BH");
      // Undeclared exception!
      FileUtilities.findFilesByExtension(list1, path0, "3kqDTXG");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          LinkedList<String> linkedList0 = new LinkedList<String>();
          MockFile mockFile0 = new MockFile("");
          mockFile0.toPath();
          boolean boolean0 = false;
          mockFile0.setExecutable(false);
          String[] stringArray0 = new String[9];
          stringArray0[0] = "";
          stringArray0[2] = "";
          stringArray0[3] = "";
          stringArray0[4] = "";
          stringArray0[5] = "";
          stringArray0[6] = "";
          stringArray0[7] = "";
          FileUtilities.getFileName(stringArray0[1], false);
          // Undeclared exception!
          try { 
            FileUtilities.deleteDir(mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/Users/dacedreimane/Desktop/litiengine\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:37)
             // sun.reflect.GeneratedMethodAccessor103.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          FileUtilities.getFileName("..");
          FileUtilities.getParentDirPath("..");
          URI uRI0 = MockURI.aFileURI;
          FileUtilities.getParentDirPath(uRI0);
          FileUtilities.getExtension("nWUd4YQ9Ls/");
          FileUtilities.getExtension("..");
          MockFile mockFile0 = new MockFile("");
          mockFile0.toPath();
          boolean boolean0 = false;
          FileUtilities.getFileName("..", false);
          // Undeclared exception!
          try { 
            FileUtilities.deleteDir(mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/Users/dacedreimane/Desktop/litiengine\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:37)
             // sun.reflect.GeneratedMethodAccessor103.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("/Users/dacedreimane/Desktop/litiengine/build/classes/java/main/de/gurkenlabs/litiengine/util/io/XmlUtilities.class ");
          File file0 = MockFile.createTempFile("/Users/dacedreimane/Desktop/litiengine/build/classes/java/main/de/gurkenlabs/litiengine/util/io/XmlUtilities.class ", "P", (File) mockFile0);
          FileUtilities.getExtension(file0);
          FileUtilities.getFileName("/Users/dacedreimane/Desktop/litiengine/build/classes/java/main/de/gurkenlabs/litiengine/util/io/XmlUtilities.class ", false);
          // Undeclared exception!
          try { 
            FileUtilities.deleteDir(mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/Users/dacedreimane/Desktop/litiengine/build/classes/java/main/de/gurkenlabs/litiengine/util/io/XmlUtilities.class /Users/dacedreimane/Desktop/litiengine/build/classes/java/main/de/gurkenlabs/litiengine/util/io/XmlUtilities.class 0P\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:37)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // sun.reflect.GeneratedMethodAccessor103.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("P", "P");
          MockFile.createTempFile("/Users/dacedreimane/Desktop/litiengine/build/classes/java/main/de/gurkenlabs/litiengine/util/io/XmlUtilities.class ", "P", (File) mockFile0);
          // Undeclared exception!
          try { 
            FileUtilities.deleteDir(mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/Users/dacedreimane/Desktop/litiengine/P/P/Users/dacedreimane/Desktop/litiengine/build/classes/java/main/de/gurkenlabs/litiengine/util/io/XmlUtilities.class 0P\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:37)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:29)
             // sun.reflect.GeneratedMethodAccessor103.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      mockFile0.setExecutable(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      MockFile mockFile1 = new MockFile("", "");
      FileUtilities.getExtension((File) mockFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Fg#7Sqj!/?k");
      FileUtilities.getFileName("/Users/dacedreimane/Desktop/litiengine/././src/de/gurkenlabs/litiengine/entities/CollisionListener.javaVw_FRXz.c");
      FileUtilities.getParentDirPath("");
      FileUtilities.humanReadableByteCount(1L);
      mockFile0.mkdirs();
      FileUtilities.getFileName("", true);
      FileUtilities.combine("net.java.games.input.PluginClassLoader$JarFileFilter", stringArray0);
      FileUtilities.findFilesByExtension(linkedList0, path0, "");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile(".", ".");
      mockFile0.toPath();
      mockFile0.mkdir();
      FileUtilities.getExtension((File) mockFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/Users/dacedreimane/Desktop/litiengine/././src/de/gurkenlabs/litiengine/entities/Entity.javaVw_FRXz.c");
      FileUtilities.getFileName("ZX*I(fv{Al");
      FileUtilities.getParentDirPath("net.java.games.input.PluginClassLoader$JarFileFilter");
      FileUtilities.humanReadableByteCount(1244L);
      FileUtilities.getFileName("ZX*I(fv{Al", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "f~Kv(x";
      stringArray0[1] = "";
      stringArray0[2] = ">'f[";
      stringArray0[3] = ">'f[";
      // Undeclared exception!
      try { 
        FileUtilities.combine("/Users/dacedreimane/Desktop/litiengine/././src/de/gurkenlabs/litiengine/entities/CollisionListener.javaVw_FRXz.c", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0: >'f[
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("de.gurkenlabs.litiengine.util.io.FileUtilities");
      Path path0 = mockFile0.toPath();
      List<String> list0 = FileUtilities.findFiles(linkedList0, path0, (String[]) null);
      FileUtilities.findFilesByExtension(list0, path0, "");
      FileUtilities.humanReadableByteCount(2767L, false);
      FileUtilities.humanReadableByteCount(2709L, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile(".", ".");
      Path path0 = mockFile0.toPath();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      FileUtilities.findFilesByExtension(linkedList1, path0, "+(4");
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".";
      stringArray0[1] = ".";
      stringArray0[2] = ".";
      stringArray0[3] = "-fYxkzb7-vw";
      // Undeclared exception!
      FileUtilities.findFiles(linkedList1, path0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[1];
      FileUtilities.getFileName("/");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        FileUtilities.findFiles(linkedList0, path0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile(".", ".");
      Path path0 = mockFile0.toPath();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      FileUtilities.findFilesByExtension(linkedList1, path0, "+(4");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".";
      stringArray0[1] = ".";
      FileUtilities.findFiles(linkedList1, path0, stringArray0);
      mockFile0.createNewFile();
      mockFile0.toPath();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile(".", ".");
      Path path0 = mockFile0.toPath();
      FileUtilities.findFilesByExtension(linkedList0, path0, "de.gurkenlabs.litiengine.util.io.FileUtilities");
      FileUtilities.humanReadableByteCount((-291L), false);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile(".", ".");
      Path path0 = mockFile0.toPath();
      linkedList0.addFirst("");
      List<String> list0 = FileUtilities.findFilesByExtension(linkedList0, path0, "");
      FileUtilities.findFilesByExtension(list0, path0, "Vw_FRXz.c");
      String[] stringArray0 = new String[0];
      FileUtilities.findFiles(list0, path0, stringArray0);
      FileUtilities.combine("5EI`a", stringArray0);
      FileUtilities.getExtension("Vw_FRXz.c");
      FileUtilities.getExtension((File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      mockFile0.setExecutable(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = " ";
      // Undeclared exception!
      FileUtilities.findFiles(linkedList0, path0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile(".", ".");
      Path path0 = mockFile0.toPath();
      FileUtilities.findFilesByExtension(linkedList0, path0, "");
      FileUtilities.humanReadableByteCount((-291L), false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile(".", ".");
      Path path0 = mockFile0.toPath();
      List<String> list0 = FileUtilities.findFilesByExtension(linkedList0, path0, "");
      FileUtilities.findFilesByExtension(list0, path0, "Vw_FRXz.c");
      String[] stringArray0 = new String[0];
      FileUtilities.findFiles(list0, path0, stringArray0);
      FileUtilities.combine("5EI`a", stringArray0);
      FileUtilities.humanReadableByteCount(1159L, true);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      try { 
        MockURL.URL(" fm]<L.+6DsUtXPhiN3", ".", (-102441799), "Vw_FRXz.c", uRLStreamHandler0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-102441799
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile(".", ".");
      Path path0 = mockFile0.toPath();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      FileUtilities.findFiles(linkedList0, path0, stringArray0);
      mockFile0.createNewFile();
      Path path1 = mockFile0.toPath();
      assertSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[1];
      FileUtilities.getFileName("/");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      List<String> list0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        FileUtilities.findFiles(list0, path0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("de.gurkenlabs.litiengine.util.io.FileUtilities");
      URI uRI0 = MockURI.URI("de.gurkenlabs.litiengine.util.io.FileUtilities", "de.gurkenlabs.litiengine.util.io.FileUtilities", (String) null, "/Users/dacedreimane/Desktop/litiengine/././src/de/gurkenlabs/litiengine/entities/EntityHitEvent.java.", "");
      String string0 = FileUtilities.getParentDirPath(uRI0);
      assertEquals("de.gurkenlabs.litiengine.util.io.FileUtilities://de.gurkenlabs.litiengine.util.io.FileUtilities", string0);
      
      FileUtilities.getParentDirPath((String) null);
      String string1 = FileUtilities.humanReadableByteCount((-3537L));
      assertEquals("-3537 bytes", string1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileUtilities.humanReadableByteCount((-1L));
      URL uRL0 = MockURL.getHttpExample();
      FileUtilities.getFileName(uRL0);
      FileUtilities.getExtension("-1 bytes");
      FileUtilities.getParentDirPath("");
      FileUtilities.getExtension("C!r+41");
      FileUtilities.getExtension("");
      FileUtilities.humanReadableByteCount((-1L), true);
      URI uRI0 = MockURI.create("");
      FileUtilities.getParentDirPath(uRI0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      FileUtilities.combine("RPH]_%;w:5z'@$", stringArray0);
      FileUtilities.getFileName("");
      FileUtilities.getParentDirPath("9x~`rQL niRg+jtsK");
      String string0 = FileUtilities.getParentDirPath((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileUtilities.getExtension("..");
      FileUtilities.getParentDirPath("..");
      URI uRI0 = MockURI.aFileURI;
      FileUtilities.getParentDirPath("");
      FileUtilities.getExtension("nWUd4YQ9Ls/");
      FileUtilities.getExtension("..");
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "P";
      FileUtilities.getParentDirPath("P");
      FileUtilities.getFileName("/fooExample");
      FileUtilities.getExtension("");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = FileUtilities.getParentDirPath("P");
      assertEquals("", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "P";
      stringArray0[1] = "P";
      stringArray0[2] = "";
      stringArray0[3] = "T";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = ">zcdLVUyQ)8";
      stringArray0[7] = "P";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        FileUtilities.combine("P", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0: >zcdLVUyQ)8
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = FileUtilities.humanReadableByteCount(0L);
      FileUtilities.getParentDirPath("0 bytes");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0 bytes";
      stringArray0[1] = "null/";
      FileUtilities.combine("0 bytes", stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Path path0 = mockFile0.toPath();
      linkedList0.addFirst("0 bytes");
      List<String> list0 = FileUtilities.findFiles(linkedList0, path0, stringArray0);
      linkedList0.offerFirst("");
      mockFile0.createNewFile();
      FileUtilities.findFilesByExtension(list0, path0, "K");
      assertTrue(linkedList0.contains(string0));
      
      FileUtilities.humanReadableByteCount(0L, true);
      FileUtilities.getParentDirPath("null/");
      FileUtilities.getExtension((File) mockFile0);
      FileUtilities.getFileName("</A:nv&y");
      FileUtilities.getParentDirPath(">'f[");
      FileUtilities.humanReadableByteCount(0L);
      String string1 = FileUtilities.getFileName("</A:nv&y", true);
      assertEquals("A:nv&y", string1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("!3::bK_)^sFyd:lIS*5", "!3::bK_)^sFyd:lIS*5");
      Path path0 = mockFile0.toPath();
      List<String> list0 = FileUtilities.findFilesByExtension(linkedList0, path0, "!3::bK_)^sFyd:lIS*5");
      File file0 = mockFile0.getAbsoluteFile();
      FileUtilities.getExtension("");
      linkedList0.addFirst("u");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "u";
      List<String> list1 = FileUtilities.findFiles(list0, path0, stringArray0);
      linkedList0.offerFirst("");
      mockFile0.createNewFile();
      FileUtilities.findFilesByExtension(list1, path0, "");
      String string0 = FileUtilities.humanReadableByteCount(1401L, true);
      assertEquals("1.4 KB", string0);
      
      FileUtilities.getParentDirPath("2{R|Jt#6");
      String string1 = FileUtilities.getExtension(file0);
      assertEquals("", string1);
      
      FileUtilities.getFileName("Tah@hml+hyU(u/");
      String string2 = FileUtilities.getParentDirPath("}>m0w1<9");
      assertEquals("null/", string2);
      
      String string3 = FileUtilities.humanReadableByteCount((-1L));
      assertEquals("-1 bytes", string3);
      
      FileUtilities.getFileName("", true);
      String string4 = FileUtilities.getFileName((String) null, true);
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = true;
      FileUtilities.getFileName("/Users/dacedreimane/Desktop/litiengine/.JAR/", true);
      FileUtilities.getFileName("Tah@hml+hyU(u");
      FileUtilities.getExtension("Tah@hml+hyU(u");
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL("~Wx:B7,g4*WW8$nu7/", "..", (-1), "6sAWB?4", uRLStreamHandler0);
      try { 
        MockURL.URL(".JAR");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: .JAR
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "net.java.games.input.PluginClassLoader$JarFileFilter";
      stringArray0[2] = "net.java.games.input.PluginClassLoader$JarFileFilter";
      stringArray0[3] = "net.java.games.input.PluginClassLoader$JarFileFilter";
      FileUtilities.combine("net.java.games.input.PluginClassLoader$JarFileFilter", stringArray0);
      boolean boolean0 = true;
      FileUtilities.getFileName("net.java.games.input.PluginClassLoader$JarFileFilter", true);
      FileUtilities.getExtension("h.#d}Wu");
      String string0 = "";
      try { 
        MockURI.URI("hK_w<\"zLl", "net.java.games.input.PluginClassLoader$JarFileFilter", "u|mx8l@RbiRC!", 0, "", "net.java.games.input.PluginClassLoader$JarFileFilter", stringArray0[1]);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 2: hK_w<\"zLl://net.java.games.input.PluginClassLoader$JarFileFilter@u|mx8l@RbiRC!:0?net.java.games.input.PluginClassLoader$JarFileFilter
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileUtilities.getExtension((String) null);
      String string0 = "/Users/dacedreimane/Desktop/litiengine/build/classes/java/main/de/gurkenlabs/litiengine/configuration/DisplayMode.class";
      FileUtilities.getParentDirPath("/Users/dacedreimane/Desktop/litiengine/build/classes/java/main/de/gurkenlabs/litiengine/configuration/DisplayMode.class");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4075, "", uRLStreamHandler0);
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "Qb!rv h~", uRLStreamHandler1);
      FileUtilities.getFileName(uRL1);
      FileUtilities.getExtension("}&I. FI4x#g");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("}&I. FI4x#g");
      Path path0 = mockFile0.toPath();
      List<String> list0 = FileUtilities.findFiles(linkedList0, path0, (String[]) null);
      FileUtilities.findFiles(list0, path0, (String[]) null);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      FileUtilities.findFiles(linkedList1, path0, (String[]) null);
      String string0 = FileUtilities.getFileName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileUtilities.getFileName("/");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("");
      mockFile0.toPath();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("/"));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long long0 = (-5549L);
      boolean boolean0 = false;
      FileUtilities.humanReadableByteCount((-5549L), false);
      FileUtilities.getParentDirPath("-5549 bytes");
      FileUtilities.getExtension("null/");
      FileUtilities.getParentDirPath("");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "#[oo#(uu\"S1B");
      mockFile0.setExecutable(false);
      mockFile0.toURI();
      FileUtilities.getExtension((File) mockFile0);
      try { 
        MockURL.URL("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileUtilities.humanReadableByteCount((-3537L), false);
      FileUtilities.humanReadableByteCount((-3537L), false);
      FileUtilities.getParentDirPath("-3537 bytes");
      FileUtilities.getFileName("");
      URL uRL0 = MockURL.getFtpExample();
      FileUtilities.getFileName(uRL0);
      try { 
        MockURI.URI("<{mws+Uioz|", "", "null/", 3766, "w", "\bin", "<{mws+Uioz|");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: <{mws+Uioz|://@null/:3766w?%08in#%3C%7Bmws+Uioz%7C
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileUtilities.humanReadableByteCount((-1L));
      URL uRL0 = MockURL.getHttpExample();
      FileUtilities.getFileName(uRL0);
      FileUtilities.getExtension("-1 bytes");
      FileUtilities.getParentDirPath("");
      FileUtilities.getExtension("C!r+41");
      FileUtilities.getExtension("");
      FileUtilities.humanReadableByteCount((-1L), true);
      URI uRI0 = MockURI.create("");
      FileUtilities.getParentDirPath(uRI0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      FileUtilities.combine("RPH]_%;w:5z'@$", stringArray0);
      FileUtilities.getFileName("\u00068Gw<R");
      List<String> list0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = FileUtilities.getParentDirPath(" f6");
      assertEquals("null/", string0);
      
      FileUtilities.getExtension("tN?:)#\u0000wDWuN!I,):U");
      String string1 = FileUtilities.getExtension("tN?:)#\u0000wDWuN!I,):U");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      String string0 = FileUtilities.getParentDirPath(uRI0);
      assertEquals("http://www.someFakeButWellFormedURL.org/", string0);
      
      String string1 = "`4s z(9lWsTHr9G,2_";
      FileUtilities.getParentDirPath("`4s z(9lWsTHr9G,2_");
      FileUtilities.getFileName("", false);
      FileUtilities.humanReadableByteCount(0L);
      FileUtilities.getFileName("~Wx:B7,g4*WW8$nu7", false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("0 bytes");
      linkedList0.add("");
      // Undeclared exception!
      try { 
        mockFile0.setLastModified((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative time
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("de.gurkenlabs.litiengine.util.io.FileUtilities");
      URI uRI0 = MockURI.URI("+/", ">(+dBuV<", (String) null, "", "h0wIlF!2xcbIxgJzD");
      String string0 = FileUtilities.getParentDirPath(uRI0);
      String string1 = FileUtilities.getParentDirPath("+/:/");
      assertFalse(string1.equals((Object)string0));
      assertEquals("+/", string1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = FileUtilities.getParentDirPath("P");
      MockURI.URI("P", "P", "", "P", "");
      FileUtilities.getExtension("P");
      MockFile mockFile0 = new MockFile("", "P");
      String string1 = FileUtilities.getExtension((File) mockFile0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = FileUtilities.humanReadableByteCount(0L);
      FileUtilities.getParentDirPath("0 bytes");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0 bytes";
      stringArray0[1] = "null/";
      FileUtilities.combine("0 bytes", stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Path path0 = mockFile0.toPath();
      linkedList0.addFirst("0 bytes");
      List<String> list0 = FileUtilities.findFiles(linkedList0, path0, stringArray0);
      linkedList0.offerFirst("");
      mockFile0.createNewFile();
      FileUtilities.findFilesByExtension(list0, path0, "K");
      assertTrue(linkedList0.contains(string0));
      
      FileUtilities.humanReadableByteCount(0L, true);
      FileUtilities.getParentDirPath("null/");
      FileUtilities.getExtension((File) mockFile0);
      FileUtilities.getFileName("</A:nv&y");
      FileUtilities.getParentDirPath(">'f[");
      FileUtilities.humanReadableByteCount(0L);
      String string1 = FileUtilities.getFileName(".JAR", true);
      assertEquals(".JAR", string1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          FileUtilities.humanReadableByteCount(2315L);
          List<String> list0 = null;
          String string0 = null;
          MockFile mockFile0 = new MockFile((String) null, "G@+({R)s~{=");
          MockFile mockFile1 = new MockFile(mockFile0, "");
          Path path0 = mockFile1.toPath();
          FileUtilities.findFilesByExtension((List<String>) null, path0, "");
          String[] stringArray0 = new String[1];
          mockFile0.renameTo(mockFile1);
          mockFile0.deleteOnExit();
          mockFile0.deleteOnExit();
          stringArray0[0] = "";
          FileUtilities.findFiles((List<String>) null, path0, stringArray0);
          // Undeclared exception!
          try { 
            FileUtilities.deleteDir(mockFile1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/Users/dacedreimane/Desktop/litiengine/G@+({R)s~{=\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:37)
             // sun.reflect.GeneratedMethodAccessor103.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileUtilities.getParentDirPath("0{,M@");
      try { 
        MockURI.URI("ga`Yjy] ", "null/", "0{,M@", (-823), "RIh", "null/", "ga`Yjy] ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ga`Yjy] ://null%2F@0{,M@:-823RIh?null/#ga%60Yjy]%20
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "net.java.games.input.PluginClassLoader$JarFileFilter";
      stringArray0[2] = "net.java.games.input.PluginClassLoader$JarFileFilter";
      stringArray0[3] = "net.java.games.input.PluginClassLoader$JarFileFilter";
      String string0 = FileUtilities.combine("net.java.games.input.PluginClassLoader$JarFileFilter", stringArray0);
      assertEquals("net.java.games.input.PluginClassLoader$JarFileFilter", string0);
      
      String string1 = FileUtilities.humanReadableByteCount(629L, false);
      assertEquals("629 bytes", string1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = FileUtilities.getFileName("ngine/entities/TriggerDeactivatedListener.java");
      assertEquals("TriggerDeactivatedListener", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = FileUtilities.humanReadableByteCount(1321L, false);
      assertEquals("1.3 KiB", string0);
      
      String[] stringArray0 = new String[2];
      String string1 = FileUtilities.combine("1.3 KiB", stringArray0);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = FileUtilities.getFileName("/");
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = FileUtilities.humanReadableByteCount(1321L);
      assertEquals("1.3 KiB", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = FileUtilities.humanReadableByteCount((-1291L));
      assertEquals("-1291 bytes", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "9`";
      stringArray0[1] = "-1291 bytes";
      stringArray0[2] = "-1291 bytes";
      stringArray0[3] = "9`";
      stringArray0[4] = "9`";
      stringArray0[5] = "9`";
      stringArray0[6] = "9`";
      stringArray0[7] = "9`";
      stringArray0[8] = "-1291 bytes";
      String string1 = FileUtilities.combine("9`", stringArray0);
      assertEquals("9`", string1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "+(4";
      // Undeclared exception!
      try { 
        FileUtilities.combine("/Users/dacedreimane/Desktop/litiengine/././src/de/gurkenlabs/litiengine/entities/TriggerDeactivatedListener.java/Users/dacedreimane/Desktop/litiengine/././src/de/gurkenlabs/litiengine/entities/EntityListener.java", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.io.FileUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = FileUtilities.getParentDirPath("P");
      assertEquals("", string0);
      
      String string1 = FileUtilities.humanReadableByteCount((-128L), false);
      assertEquals("-128 bytes", string1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = FileUtilities.humanReadableByteCount(1321L, true);
      assertEquals("1.3 KB", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileUtilities.humanReadableByteCount(0L, true);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        FileUtilities.combine(".", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.io.FileUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileUtilities.getExtension("CO:n");
      URI uRI0 = MockURI.aFTPURI;
      FileUtilities.getExtension((String) null);
      FileUtilities.getFileName("");
      // Undeclared exception!
      try { 
        FileUtilities.deleteDir((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.io.FileUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtilities.getFileName((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = FileUtilities.getFileName(uRL0);
      assertEquals("fooExample", string0);
      
      FileUtilities.getFileName("net.java.games.input.PluginClassLoader$JarFileFilter", false);
      String string1 = FileUtilities.getParentDirPath("net.java.games.input.PluginClassLoader$JarFileFilter");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("net.java.games.input.PluginClassLoader$JarFileFilter");
      Path path0 = mockFile0.toPath();
      linkedList0.add("|x9h1P^0X");
      mockFile0.getAbsolutePath();
      List<String> list0 = FileUtilities.findFilesByExtension(linkedList0, path0, "fooExample");
      FileUtilities.findFilesByExtension(list0, path0, "fooExample");
      FileUtilities.humanReadableByteCount(0L, false);
      String string2 = FileUtilities.getExtension("c=ed''O4:vZ`h5]p");
      assertTrue(string2.equals((Object)string1));
      
      FileUtilities.humanReadableByteCount((-122L));
      String string3 = FileUtilities.humanReadableByteCount((-1L));
      assertEquals("-1 bytes", string3);
      
      String string4 = FileUtilities.getFileName("net.java.games.input.PluginClassLoader$JarFileFilter");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "net.java.games.input.PluginClassLoader$JarFileFilter";
      stringArray0[1] = "net.java.games.input";
      stringArray0[2] = "net.java.games.input";
      String string5 = FileUtilities.combine("0 bytes", stringArray0);
      assertTrue(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileUtilities.getFileName("$u yLN_I%vd]y-u1+", true);
      FileUtilities.getFileName("*6\"E&fb0");
      FileUtilities.getExtension("291&)9XF.SbN%l-Z");
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("*6\"E&fb0", "h_JA}8JL9Lc9h%", (-1), "$u yLN_I%vd]y-u1+", uRLStreamHandler0);
      FileUtilities.getFileName(uRL0);
      FileUtilities.getFileName("", false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.pollFirst();
      linkedList0.add("h_JA}8JL9Lc9h%");
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileUtilities.getExtension("");
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "+sKmf");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileUtilities.getFileName("");
      String string0 = FileUtilities.getParentDirPath("'aw;M 0%K/cn?qFwI");
      assertEquals("'aw;M 0%K/", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "/Users/dacedreimane/Desktop/litiengine/build/classes/java/main/de/gurkenlabs/litiengine/util/io/XmlUtilities.class ";
          MockFile mockFile0 = new MockFile("/Users/dacedreimane/Desktop/litiengine/build/classes/java/main/de/gurkenlabs/litiengine/util/io/XmlUtilities.class ");
          // Undeclared exception!
          try { 
            FileUtilities.deleteDir(mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/Users/dacedreimane/Desktop/litiengine/build/classes/java/main/de/gurkenlabs/litiengine/util/io/XmlUtilities.class \" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:37)
             // sun.reflect.GeneratedMethodAccessor103.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = FileUtilities.getParentDirPath("P");
      MockURI.URI("P");
      String string1 = FileUtilities.getExtension("P");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileUtilities.getParentDirPath("");
      String string0 = FileUtilities.humanReadableByteCount(1321L, false);
      assertEquals("1.3 KiB", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileUtilities.getExtension("");
      FileUtilities.getParentDirPath("");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Path path0 = null;
      String[] stringArray0 = null;
      int int0 = 0;
      linkedList0.add("KFU=#jj");
      linkedList0.subList(0, 0);
      // Undeclared exception!
      try { 
        FileUtilities.findFiles(linkedList0, (Path) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "..";
      FileUtilities.getFileName("..");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".";
      stringArray0[1] = ".";
      FileUtilities.combine("", stringArray0);
      URI uRI0 = MockURI.aFileURI;
      FileUtilities.getParentDirPath(uRI0);
      FileUtilities.getParentDirPath(uRI0);
      MockFile mockFile0 = new MockFile(".");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", ".", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = FileUtilities.getFileName("\"+,rh0rUr0 ^3", true);
      assertEquals("\"+,rh0rUr0 ^3", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUtilities.getExtension("nWUd4YQ9Ls");
          File file0 = MockFile.createTempFile("B)6j^;b7l_EZ", "nWUd4YQ9Ls");
          // Undeclared exception!
          try { 
            FileUtilities.deleteDir(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/var/folders/_x/t3lbmmsx23s7lc_jg5jbkb_00000gn/T/B)6j^;b7l_EZ0nWUd4YQ9Ls\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // de.gurkenlabs.litiengine.util.io.FileUtilities.deleteDir(FileUtilities.java:37)
             // sun.reflect.GeneratedMethodAccessor103.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = FileUtilities.getFileName(uRL0);
      assertEquals("url", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = FileUtilities.getExtension("/Users/dacedreimane/Desktop/litiengine/././src/de/gurkenlabs/litiengine/entities/CollisionInfo.java.");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FileUtilities.getExtension("net.java.games.input.PluginClassLoader$JarFileFilter");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "PluginClassLoader$JarFileFilter";
      stringArray0[1] = "net.java.games.input.PluginClassLoader$JarFileFilter";
      stringArray0[2] = "net.java.games.input.PluginClassLoader$JarFileFilter";
      stringArray0[3] = "net.java.games.input.PluginClassLoader$JarFileFilter";
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(2543);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(341);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1812);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(341);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(452);
      integerArray0[5] = integer5;
      linkedList0.toArray(integerArray0);
      stringArray0[4] = "PluginClassLoader$JarFileFilter";
      stringArray0[5] = "net.java.games.input.PluginClassLoader$JarFileFilter";
      stringArray0[6] = "PluginClassLoader$JarFileFilter";
      stringArray0[7] = "PluginClassLoader$JarFileFilter";
      stringArray0[8] = "PluginClassLoader$JarFileFilter";
      // Undeclared exception!
      try { 
        FileUtilities.findFiles(linkedList0, (Path) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("de.gurkenlabs.litiengine.util.io.FileUtilities");
      Path path0 = mockFile0.toPath();
      List<String> list0 = FileUtilities.findFiles(linkedList0, path0, (String[]) null);
      FileUtilities.findFilesByExtension(list0, path0, "");
      try { 
        MockURI.URI("vFuuaOs0", ">(+dBuV<", (String) null, "", "h0wIlF!2xcbIxgJzD");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 2: vFuuaOs0://%3E(+dBuV%3C?#h0wIlF!2xcbIxgJzD
         //
         verifyException("java.net.URI$Parser", e);
      }
  }
}

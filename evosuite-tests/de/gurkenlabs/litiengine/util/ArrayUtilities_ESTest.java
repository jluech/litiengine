/*
 * This file was automatically generated by EvoSuite
 * Sat May 29 22:00:22 GMT 2021
 */

package de.gurkenlabs.litiengine.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.gurkenlabs.litiengine.util.ArrayUtilities;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtilities_ESTest extends ArrayUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = ArrayUtilities.concat(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        ArrayUtilities.concat(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.ArrayUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = new long[2];
      long[] longArray2 = ArrayUtilities.concat(longArray0, longArray1);
      assertEquals(6, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[4];
      int[] intArray2 = ArrayUtilities.concat(intArray0, intArray1);
      assertEquals(4, intArray2.length);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[2];
      byte[] byteArray2 = ArrayUtilities.concat(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(2, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = ArrayUtilities.splitDouble("mSMt?:T~?p{F$rB");
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "vD;o";
      String[] stringArray1 = ArrayUtilities.remove(stringArray0, "vx_+S5Cw2`f\u0001 ~~q3+");
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = ArrayUtilities.join((boolean[]) null, "SWqb|>");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      String string0 = ArrayUtilities.join(booleanArray0, "/Ql^H6:Y\"8q(\"bbNx<");
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      String string0 = ArrayUtilities.join(booleanArray0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      String string0 = ArrayUtilities.join(booleanArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short[] shortArray0 = new short[5];
      String string0 = ArrayUtilities.join(shortArray0, ",");
      assertEquals("0,0,0,0,0", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = ArrayUtilities.join(shortArray0, "_Z)(ba");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short[] shortArray0 = new short[4];
      String string0 = ArrayUtilities.join(shortArray0);
      assertEquals("0,0,0,0", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = ArrayUtilities.join(shortArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = ArrayUtilities.join((Object[]) null, "mSMt?:T~?p{F$rB");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = ArrayUtilities.join(objectArray0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = ArrayUtilities.join((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = ArrayUtilities.join(objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long[] longArray0 = new long[5];
      String string0 = ArrayUtilities.join(longArray0, "_Z)(ba");
      assertEquals("0_Z)(ba0_Z)(ba0_Z)(ba0_Z)(ba0", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = ArrayUtilities.join(longArray0, "xnS!q");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = ArrayUtilities.join((long[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = ArrayUtilities.join(longArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = ArrayUtilities.join((int[]) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[2];
      String string0 = ArrayUtilities.join(intArray0, "");
      assertEquals("00", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = ArrayUtilities.splitInt("zXQ");
      String string0 = ArrayUtilities.join(intArray0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = ArrayUtilities.splitInt("Jpe8QO", "Jpe8QO");
      String string0 = ArrayUtilities.join(intArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[] floatArray0 = new float[5];
      String string0 = ArrayUtilities.join(floatArray0, "0,81,0,-71,1,91");
      assertEquals("0.00,81,0,-71,1,910.00,81,0,-71,1,910.00,81,0,-71,1,910.00,81,0,-71,1,910.0", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = ArrayUtilities.join(floatArray0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = ArrayUtilities.join((float[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = ArrayUtilities.join(floatArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      String string0 = ArrayUtilities.join(doubleArray0, "");
      assertEquals("0.00.00.00.00.0", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = ArrayUtilities.join(doubleArray0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      String string0 = ArrayUtilities.join(doubleArray0);
      assertEquals("0.0,0.0,0.0,0.0,0.0,0.0,0.0", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = ArrayUtilities.join(doubleArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = ArrayUtilities.join((byte[]) null, "K1-5>!");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = ArrayUtilities.join(byteArray0, "O7");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = ArrayUtilities.join((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = ArrayUtilities.join(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2458);
      linkedList0.add(integer0);
      String string0 = ArrayUtilities.join((Collection<?>) linkedList0, ",");
      assertEquals("2458", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[][] stringArray0 = new String[5][3];
      List<String> list0 = ArrayUtilities.toList(stringArray0);
      String string0 = ArrayUtilities.join((Collection<?>) list0);
      assertEquals("null,null,null,null,null,null,null,null,null,null,null,null,null,null,null", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtilities.distinct(objectArray0, objectArray0);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Object[] objectArray0 = ArrayUtilities.concat((Object[]) stringArray0, (Object[]) stringArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtilities.concat(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtilities.concat(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtilities.concat(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtilities.arrayCopy(integerArray0);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtilities.arrayCopy(objectArray0);
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      Object[] objectArray1 = ArrayUtilities.append(objectArray0, object0);
      assertEquals(1, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.toList((Object[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.ArrayUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        ArrayUtilities.toIntegerArray(linkedList0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.splitInt("mSMt?:T~?p{F$rB", "mSMt?:T~?p{F$rB");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 9
         // mSMt?:T~?p{F$rB
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.splitInt("wjc9rdB:D$E", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.splitDouble("mSMt?:T~?p{F$rB", "mSMt?:T~?p{F$rB");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 9
         // mSMt?:T~?p{F$rB
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.splitDouble("5Mq'P6vV", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        ArrayUtilities.remove((Object[]) null, (Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.ArrayUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.join((Collection<?>) null, ";7&k");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.ArrayUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.join((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.ArrayUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.distinct((Object[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        ArrayUtilities.distinct((Object[]) stringArray0, objectArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.contains((Object[]) null, (Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.ArrayUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.concat((Object[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.ArrayUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        ArrayUtilities.concat((Object[]) stringArray0, objectArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.concat((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.ArrayUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[10];
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtilities.append((Object[]) stringArray0, object0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = ArrayUtilities.splitDouble("", "");
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = ArrayUtilities.splitInt((String) null, (String) null);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = ArrayUtilities.join((long[]) null, ",");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = ArrayUtilities.join(byteArray0, "");
      assertEquals("00000", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "de.gurkenlabs.litiengine.util.ArrayUtilities";
      String[] stringArray1 = ArrayUtilities.remove(stringArray0, "de.gurkenlabs.litiengine.util.ArrayUtilities");
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "n[qr_el[<{ct\"<d";
      boolean boolean0 = ArrayUtilities.contains(stringArray0, "n[qr_el[<{ct\"<d", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ">";
      boolean boolean0 = ArrayUtilities.contains(stringArray0, ">", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "cs1";
      boolean boolean0 = ArrayUtilities.contains(stringArray0, (String) null, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = ArrayUtilities.contains(stringArray0, "", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]&+";
      boolean boolean0 = ArrayUtilities.contains(stringArray0, "0UR[?Y?g>1", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = ArrayUtilities.contains((String[]) null, "X;w(c&<P", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = ArrayUtilities.contains(stringArray0, (String) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) "]d&+";
      boolean boolean0 = ArrayUtilities.contains(objectArray0, (Object) "]d&+");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      boolean boolean0 = ArrayUtilities.contains(objectArray0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Object object0 = new Object();
      boolean boolean0 = ArrayUtilities.contains((Object[]) stringArray0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = ArrayUtilities.splitDouble("]d&+", "]d&+");
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = ArrayUtilities.splitDouble("jpe8qo", "");
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 8.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = ArrayUtilities.splitDouble((String) null, (String) null);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = ArrayUtilities.splitInt("}i-Ow_G|", "}i-Ow_G|");
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = ArrayUtilities.splitInt("3");
      assertArrayEquals(new int[] {3}, intArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.arrayCopy((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.ArrayUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[8];
      Object[] objectArray0 = ArrayUtilities.distinct((Object[]) stringArray0, (Object[]) stringArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = ArrayUtilities.join((Object[]) stringArray0, "G!XAkzfkzeLtv");
      assertEquals("nullG!XAkzfkzeLtvnullG!XAkzfkzeLtvnullG!XAkzfkzeLtvnullG!XAkzfkzeLtvnullG!XAkzfkzeLtvnullG!XAkzfkzeLtvnull", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = ArrayUtilities.splitInt((String) null);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = ArrayUtilities.join((Collection<?>) linkedList0, "]d&+");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = ArrayUtilities.join((double[]) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.append((String[]) null, "3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      String string0 = ArrayUtilities.join(booleanArray0, ":");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.toIntegerArray((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.ArrayUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = ArrayUtilities.join((Object[]) stringArray0);
      assertEquals("null,null,null,null,null,null,null,null", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = ArrayUtilities.join((short[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = ArrayUtilities.join((boolean[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.concat((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.ArrayUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = ArrayUtilities.join((short[]) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = ArrayUtilities.splitInt("", "|jd<'=s");
      String string0 = ArrayUtilities.join(intArray0, "n%q2Ei");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = ArrayUtilities.join((float[]) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[] floatArray0 = new float[3];
      String string0 = ArrayUtilities.join(floatArray0);
      assertEquals("0.0,0.0,0.0", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ArrayUtilities[][] arrayUtilitiesArray0 = new ArrayUtilities[0][8];
      List<ArrayUtilities> list0 = ArrayUtilities.toList(arrayUtilitiesArray0);
      String string0 = ArrayUtilities.join((Collection<?>) list0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = ArrayUtilities.join((double[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = ArrayUtilities.join((int[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = ArrayUtilities.join(byteArray0);
      assertNotNull(string0);
      assertEquals("0,0,0,0,0,0", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long[] longArray0 = new long[8];
      String string0 = ArrayUtilities.join(longArray0);
      assertEquals("0,0,0,0,0,0,0,0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.concat((long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.gurkenlabs.litiengine.util.ArrayUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = ArrayUtilities.splitDouble("");
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtilities.concat(objectArray0, objectArray0);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = ArrayUtilities.splitDouble("iKt", "iKt");
      double[] doubleArray1 = ArrayUtilities.concat(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
  }
}

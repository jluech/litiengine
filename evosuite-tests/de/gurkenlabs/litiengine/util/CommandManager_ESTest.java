/*
 * This file was automatically generated by EvoSuite
 * Wed May 26 16:24:00 GMT 2021
 */

package de.gurkenlabs.litiengine.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.gurkenlabs.litiengine.util.CommandManager;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CommandManager_ESTest extends CommandManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      Predicate<String[]> predicate0 = Predicate.isEqual((Object) "");
      commandManager0.bind("", predicate0);
      boolean boolean0 = commandManager0.executeCommand(" because it is already bound.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      boolean boolean0 = commandManager0.executeCommand(" because it is already bound.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      Predicate<String[]> predicate0 = Predicate.isEqual((Object) "W");
      Predicate<String[]> predicate1 = predicate0.negate();
      commandManager0.bind("W", predicate1);
      boolean boolean0 = commandManager0.executeCommand("W");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      boolean boolean0 = commandManager0.executeCommand("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      boolean boolean0 = commandManager0.executeCommand(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      boolean boolean0 = commandManager0.executeCommand((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      Predicate<String[]> predicate0 = Predicate.isEqual((Object) commandManager0);
      commandManager0.bind("ID.K% HcGe0W\"", predicate0);
      // Undeclared exception!
      try { 
        commandManager0.bind("ID.K% HcGe0W\"", predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot bind command ID.K% HcGe0W\" because it is already bound.
         //
         verifyException("de.gurkenlabs.litiengine.util.CommandManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      // Undeclared exception!
      try { 
        commandManager0.bind("", (Predicate<String[]>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      commandManager0.start();
      // Undeclared exception!
      try { 
        commandManager0.start();
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      commandManager0.terminate();
  }
}
